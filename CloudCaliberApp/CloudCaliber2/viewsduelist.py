from django.shortcuts import render
import xlwt
import json
import os
import re 
from django.utils.timezone import datetime
from django.utils.timezone import  timedelta
from django.views.decorators.csrf import csrf_exempt
from rest_framework.parsers import JSONParser
from django.http.response import JsonResponse
from django.http import HttpRequest, HttpResponse
from django.contrib import messages
from django.shortcuts import redirect
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger


import textutils.settings
 
#import textutils.settings


import threading as th
from CloudCaliber import views
from CloudCaliber import viewsapi 
from CloudCaliber import views8d
from CloudCaliber import viewscalibrations
from CloudCaliber import viewsduecalendar
from CloudCaliber import viewsdamaged
from CloudCaliber import viewsduelist
from CloudCaliber import viewsgaugeusagewise
from CloudCaliber import viewsissuereturn
from CloudCaliber import viewsmasterlist
from CloudCaliber import viewsmasterlistdetails
from CloudCaliber import viewsmsastudy
from CloudCaliber import viewsuserlist
from CloudCaliber import viewsvalidations
from CloudCaliber import viewscategorycreation

from CloudCaliber.models import Admin1Companyinfo, Adminoperatorlist, Masterinstrumentattachmentslist, Masterinstrumentcalibrationmasterslist, Masterinstrumentcalibrationsettingslist, Masterinstrumentenvironmentconditionlist, Masterinstrumentpartprojectslist,  Masterinstrumentpurchasechecklist, Masterinstrumentsparepartslist, Masterinstrumentslist 
# 
#from CloudCaliber.models import Admininstrumentmateriallist, Thistorytransactions, Thistorytransactionsmsa, Tmsaattributedatalist, Tmsabiasdatalist, Tmsalinearitydatalist, Tmsarnrdatalist, Tmsastabilitydatalist Tcalibrationhistorydetailslist, Tcalibrationhistorylist, Tcalibrationhistorymasterschecklistlist, Tcalibrationhistorymastersusedlist, Tdevicedamaged, Tdevicemissing, Tservicehistorylist, Ttraceissuereturnlist, Tutility8D0Emergencyactionlist, Tutility8D1Documentslist, Tutility8D1Teamdlist, Tutility8D3Containmentactionlist, Tutility8D4Rootcauselist, Tutility8D5Correctiveactionlist, Tutility8D6Implementcorrectiveactionlist, Tutility8D7Apreventiveactionlist, Tutility8D7Bprocesslist, Tutility8D7Creviewlist
#$, Tmsavisualdatalist Tpostpone, Tprepone, Tusagegaugedaily, Tverificationmain, Admin1Atrack, Admin1Companyinfo, Adminassetcategorylist, Adminassetcategorytypelist, Adminassetcategorytypelist1
from CloudCaliber.models import  Admincategoryidcontinuousnolist, Adminassetcontinuousformatlist, Adminassetserialformatlist,   Adminassetcategorytypelist1, Adminassetcategorylist, Adminassetcategorytypelist, Adminequipmentlist, Adminrangelist, Admininstrumenttypelist, Thistorytransactions, Adminassetsparepartslist, Adminassettypelist, Admincalibconditionslist, Adminexternalagencylist, Adminexternalagencytraceabilitylist, Admingradelist, Admininstrumentcattypelist, Admininstrumentequipmentlist, Admininstrumentmateriallist, Admininstrumentoperationlist, Admininstrumentrangelist, Adminlocationlist, Adminmakelist, Adminpartdetailslist, Adminpartdetailsforinstrumentlist, Adminpurchasechecklist, Adminrolelist, Adminstoragelocationlist, Admintoleranceclasschartlist, Admintoleranceclasslist, Admintoleranceclasschartlist
from CloudCaliber.models import Adminuseraccesslist, Adminassetcontinuousformatlist, Admininstrumentmateriallist, Admincustomerlist, Admintolerancedialgaugelist, Admintoleranceismanufacturingstdchartlist, Admintolerancepressuregaugelist, Admintoleranceradiusgaugelist, Admintolerancesettingringlist, Admintoleranceslipgaugelist, Adminunitlist, Adminunitofmeasurelist, Adminuserlist
#from CloudCaliber.models import Tutility8D8Followupmeetingslist, Tutility8Dlist, Tutilitydcdetailslist, Tutilitydclist

# from CloudCaliber.serializers import   AdminuserlistSerializer, AdminassetcategorytypelistSerializer, Adminassetcategorytypelist1Serializer

 

def export_Duelist_xls(request):

    
    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantIdSelect = 0
    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
 
    lCategoryID = request.session['lCategoryID']                       
    lLoginUserId = request.session['lLoginUserId']  
    semployeename = request.session['semployeename'] 
    semployeeno = request.session['semployeeno']  
    lunitid = request.session['lunitid']  
    sunitno = request.session['sunitno']  
    lcompanyid = request.session['lcompanyid']  
    scompantname = request.session['scompantname']  
    semailaddress = request.session['semailaddress']  
    smobile = request.session['smobile']  

    bSAPCodeDone =0
    bSAPCodeNotDone =0
    ID_Categories =0
    ClassificationData =0
    Flow1Data = 0
    Flow2Data =0
    Flow3Data =0
    Flow4Data =0
    Flow5Data =0
    GaugeClass = 0
    Location  = 0
    txtSearch  = ""
    lcode =0


    bSAPCodeDone = request.session['bSAPCodeDone']
    bSAPCodeNotDone = request.session['bSAPCodeNotDone']
    ID_Categories = request.session['ID_Categories'] 
    ClassificationData = request.session['ClassificationData']  
    Flow1Data = request.session['Flow1Data'] 
    Flow2Data =  request.session['Flow2Data']  
    Flow3Data = request.session['Flow3Data'] 
    Flow4Data = request.session['Flow4Data'] 
    Flow5Data = request.session['Flow5Data'] 
    GaugeClass = request.session['GaugeClass']  
    Location = request.session['Location']   
    txtSearch = request.session['txtSearch']   
    lcode = len(txtSearch)

    dCurDateFrom = datetime.today().strftime('%d-%m-%Y')
    
    dCurDateTo = datetime.today() + timedelta(days=30) 

    dtCurDateTo = datetime.today() + timedelta(days=30) 
    CurDateTo = dtCurDateTo.strftime('%d-%m-%Y')
    dCurDateFrom = request.session['CurDateFrom']  
    dCurDateTo =request.session['CurDateTo']  

    CurDateFrom = datetime.today().strftime('%d-%m-%Y')
    
    # CurDateTo = datetime.today() + timedelta(days=30) 

    CurDateFrom = dCurDateFrom
    CurDateTo = dCurDateTo


 
 

    request.session['bSAPCodeDone']  = bSAPCodeDone
    request.session['bSAPCodeNotDone']  = bSAPCodeNotDone
    request.session['ID_Categories']  = ID_Categories
    request.session['ClassificationData']  = ClassificationData
    request.session['Flow1Data']  = Flow1Data
    request.session['Flow2Data']  = Flow2Data
    request.session['Flow3Data']  = Flow3Data
    request.session['Flow4Data']  = Flow4Data
    request.session['Flow5Data']  = Flow5Data
    request.session['GaugeClass']  = GaugeClass
    request.session['Location']  = Location 
    request.session['txtSearch']  = txtSearch 

    request.session['CurDateFrom']  = dCurDateFrom
    request.session['CurDateTo']  = dCurDateTo

    request.session['lCategoryID'] = lCategoryID                        
    request.session['lLoginUserId'] = lLoginUserId
    request.session['semployeename'] = semployeename
    request.session['semployeeno'] = semployeeno
    request.session['lunitid'] = lunitid
    request.session['sunitno']  = sunitno
    request.session['lcompanyid']  = lcompanyid
    request.session['scompantname']  = scompantname
    request.session['semailaddress'] = semailaddress
    request.session['smobile']  = smobile

    request.session['badmin'] =0
    request.session['badmin1'] = 0
    request.session['bstores'] = 0
    request.session['bcalibration'] = 0
    request.session['bservice'] = 0
    request.session['bmsa'] = 0
    request.session['bmasterlistonlyallplant'] = 1  
    request.session['breadonly'] =0
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    bSAPCodeDone = 0
    bSAPCodeNotDone = 0

    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno
 
    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode


    response = HttpResponse(content_type='application/ms-excel')

    d = datetime.now().date()
    d1 = datetime.now().time()
    sTR = ""
    sTR1 = ""
    sTR2 = ""
    sFileName = ""
    
    sFileName = sPlantCode + "DueList" + d.strftime('%d')  + d.strftime('%m')  + d.strftime('%y')   + d1.strftime('%H')    + d1.strftime('%M')   + d1.strftime('%S')  +  ".xls"
    response['Content-Disposition'] = 'attachment; filename= ' + sFileName

    wb = xlwt.Workbook(encoding='utf-8')
    ws = wb.add_sheet('Master List Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True

    styles = dict(
        bold = 'font: bold 1',
        italic = 'font: italic 1',
        # Wrap text in the cell
        wrap_bold = 'font: bold 1; align: wrap 1;',
        # White text on a blue background
        reversed = 'pattern: pattern solid, fore_color blue; font: color white;',
        # Light orange checkered background
        light_orange_bg = 'pattern: pattern fine_dots, fore_color white, back_color orange;',
        # Heavy borders
        bordered = 'border: top thick, right thick, bottom thick, left thick;',
        # 16 pt red text
        big_red = 'font: height 320, color red;',
    )


    columns = [ 'Id', 'Description', 'Old ID', 'SAP Code',  'Plant', 'Classification', 'Category', 'Flow Specification1' , 'Flow Specification2', 'Flow Specification3', 'Flow Specification4', 'Flow Specification5',  'Specification',    'Status',  'Last Calibration Date',  'Next Calibration Date',  'Current Usage Location',  'Last Issued Date',  'Last Returned Date',  'Last Issued To',  'Last Issued M/c'  ]

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    # Sheet body, remaining rows
    font_style = xlwt.XFStyle()


     

    if (lcode != 0):

        
            
        if  (Location != 0):

            if(Flow5Data != 0):

                if(GaugeClass != 0):

                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    
                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                if(Flow4Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    if(Flow3Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        if(Flow2Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow1Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid') 
                            else:
                                if(ID_Categories != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    if(ClassificationData != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location).order_by('sinstrumentid')   

        else:
            
            if(Flow5Data != 0):

                if(GaugeClass != 0):

                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    
                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

            else:
                if(Flow4Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,   dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                else:
                    if(Flow3Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                    else:
                        if(Flow2Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                        else:
                            if(Flow1Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid') 
                            else:
                                if(ID_Categories != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                else:
                                    if(ClassificationData != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData).order_by('sinstrumentid')   

                                    else:
                                        
                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')   


    else:

        if  (Location != 0):

            if(Flow5Data != 0):

                if(GaugeClass != 0):

                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    
                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                if(Flow4Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   
                
                else:
                    
                    if(Flow3Data != 0):
                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        if(Flow2Data != 0):

                            
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow1Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                if(ID_Categories != 0):


                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    if(ClassificationData != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location).order_by('sinstrumentid')   

        else:
            
            if(Flow5Data != 0):

                if(GaugeClass != 0):

                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    
                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

            else:
                if(Flow4Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   
                
                else:
                    
                    if(Flow3Data != 0):
                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                    else:
                        if(Flow2Data != 0):

                            
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                        else:
                            if(Flow1Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                            else:
                                if(ID_Categories != 0):


                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                else:
                                    if(ClassificationData != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData).order_by('sinstrumentid')   

                                    else:
                                        
                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')   




     
    for row in Masterinstrumentslist_list:
        row_num += 1
        for col_num in range(21):
            if (col_num == 0):
                column_data = row.sinstrumentid
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, column_data, font_style)
            if (col_num == 1):
                column_data = row.sdescription
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, column_data, font_style)
            if (col_num == 2): 
                
                column_data =   str(row.oldinstrument_id) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 3): 
                
                column_data =   str(row.serpcode) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 4): 
                
                column_data =   str(row.splanttype) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 5): 
                
                column_data =   str(row.sassettype) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 6): 
                
                column_data =   str(row.categorytype)  
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 7): 
                
                column_data =  row.scategorytype1 + " : " + str(row.styperefname1)   
                if(column_data is None):
                    column_data = "" 
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 8): 
                
                column_data =   row.scategorytype2 + " : " + str(row.styperefname2) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 9): 
                
                column_data =  row.scategorytype3 + " : " +  str(row.styperefname3)
                if(column_data is None):
                    column_data = ""    
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 10): 
                
                column_data =  row.scategorytype4 + " : " +  str(row.styperefname4) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 11): 
                
                column_data =  row.scategorytype5 + " : " +  str(row.styperefname5)  
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 12): 
                
                column_data =  row.ssizea   
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 13): 
                
                column_data =  row.scurrentstatus   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 14): 
                
                column_data =  row.slastcalibdate   
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 15): 
                
                column_data =  row.snextcalibdate 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 16): 
                
                column_data =  row.slocationname   
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 17): 
                
                column_data =  row.sissueddate 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 18): 
                
                column_data =  row.sreturneddate 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 19): 
                
                column_data =  row.sissuedto 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 20): 
                
                column_data =  row.sissuedmachineto 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)




    wb.save(response)

    return response



def export_OverDuelist_xls(request):

    
    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantIdSelect = 0
    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
 
    lCategoryID = request.session['lCategoryID']                       
    lLoginUserId = request.session['lLoginUserId']  
    semployeename = request.session['semployeename'] 
    semployeeno = request.session['semployeeno']  
    lunitid = request.session['lunitid']  
    sunitno = request.session['sunitno']  
    lcompanyid = request.session['lcompanyid']  
    scompantname = request.session['scompantname']  
    semailaddress = request.session['semailaddress']  
    smobile = request.session['smobile']  

    bSAPCodeDone =0
    bSAPCodeNotDone =0
    ID_Categories =0
    ClassificationData =0
    Flow1Data = 0
    Flow2Data =0
    Flow3Data =0
    Flow4Data =0
    Flow5Data =0
    GaugeClass = 0
    Location  = 0
    txtSearch  = ""
    lcode =0


    bSAPCodeDone = request.session['bSAPCodeDone']
    bSAPCodeNotDone = request.session['bSAPCodeNotDone']
    ID_Categories = request.session['ID_Categories'] 
    ClassificationData = request.session['ClassificationData']  
    Flow1Data = request.session['Flow1Data'] 
    Flow2Data =  request.session['Flow2Data']  
    Flow3Data = request.session['Flow3Data'] 
    Flow4Data = request.session['Flow4Data'] 
    Flow5Data = request.session['Flow5Data'] 
    GaugeClass = request.session['GaugeClass']  
    Location = request.session['Location']   
    txtSearch = request.session['txtSearch']   
    lcode = len(txtSearch)
 

    # dCurDateFrom = request.session['CurDateFrom']  
    # dCurDateTo =request.session['CurDateTo']  

    CurDate = datetime.today().strftime('%Y-%m-%d')
    #CurDate = dCurDateFrom

 
 

    request.session['bSAPCodeDone']  = bSAPCodeDone
    request.session['bSAPCodeNotDone']  = bSAPCodeNotDone
    request.session['ID_Categories']  = ID_Categories
    request.session['ClassificationData']  = ClassificationData
    request.session['Flow1Data']  = Flow1Data
    request.session['Flow2Data']  = Flow2Data
    request.session['Flow3Data']  = Flow3Data
    request.session['Flow4Data']  = Flow4Data
    request.session['Flow5Data']  = Flow5Data
    request.session['GaugeClass']  = GaugeClass
    request.session['Location']  = Location 
    request.session['txtSearch']  = txtSearch 
 

    request.session['lCategoryID'] = lCategoryID                        
    request.session['lLoginUserId'] = lLoginUserId
    request.session['semployeename'] = semployeename
    request.session['semployeeno'] = semployeeno
    request.session['lunitid'] = lunitid
    request.session['sunitno']  = sunitno
    request.session['lcompanyid']  = lcompanyid
    request.session['scompantname']  = scompantname
    request.session['semailaddress'] = semailaddress
    request.session['smobile']  = smobile

    request.session['badmin'] =0
    request.session['badmin1'] = 0
    request.session['bstores'] = 0
    request.session['bcalibration'] = 0
    request.session['bservice'] = 0
    request.session['bmsa'] = 0
    request.session['bmasterlistonlyallplant'] = 1  
    request.session['breadonly'] =0
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    bSAPCodeDone = 0
    bSAPCodeNotDone = 0

    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno
 
    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode


    response = HttpResponse(content_type='application/ms-excel')

    d = datetime.now().date()
    d1 = datetime.now().time()
    sTR = ""
    sTR1 = ""
    sTR2 = ""
    sFileName = ""
    
    sFileName = sPlantCode + "OverDueList" + d.strftime('%d')  + d.strftime('%m')  + d.strftime('%y')   + d1.strftime('%H')    + d1.strftime('%M')   + d1.strftime('%S')  +  ".xls"
    response['Content-Disposition'] = 'attachment; filename= ' + sFileName

    wb = xlwt.Workbook(encoding='utf-8')
    ws = wb.add_sheet('Master List Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True

    styles = dict(
        bold = 'font: bold 1',
        italic = 'font: italic 1',
        # Wrap text in the cell
        wrap_bold = 'font: bold 1; align: wrap 1;',
        # White text on a blue background
        reversed = 'pattern: pattern solid, fore_color blue; font: color white;',
        # Light orange checkered background
        light_orange_bg = 'pattern: pattern fine_dots, fore_color white, back_color orange;',
        # Heavy borders
        bordered = 'border: top thick, right thick, bottom thick, left thick;',
        # 16 pt red text
        big_red = 'font: height 320, color red;',
    )


    columns = [ 'Id', 'Description', 'Old ID', 'SAP Code',  'Plant', 'Classification', 'Category', 'Flow Specification1' , 'Flow Specification2', 'Flow Specification3', 'Flow Specification4', 'Flow Specification5',  'Specification',    'Status',  'Last Calibration Date',  'Next Calibration Date',  'Current Usage Location',  'Last Issued Date',  'Last Returned Date',  'Last Issued To',  'Last Issued M/c'  ]

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    # Sheet body, remaining rows
    font_style = xlwt.XFStyle()


    
    if (lcode != 0):

        
            
        if  (Location != 0):

            if(Flow5Data != 0):

                if(GaugeClass != 0):

                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    
                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                if(Flow4Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    if(Flow3Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        if(Flow2Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow1Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid') 
                            else:
                                if(ID_Categories != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    if(ClassificationData != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

        else:
            
            if(Flow5Data != 0):

                if(GaugeClass != 0):

                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    
                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

            else:
                if(Flow4Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                else:
                    if(Flow3Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                    else:
                        if(Flow2Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                        else:
                            if(Flow1Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid') 
                            else:
                                if(ID_Categories != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                else:
                                    if(ClassificationData != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                    else:
                                        
                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   


    else:

        if  (Location != 0):

            if(Flow5Data != 0):

                if(GaugeClass != 0):

                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    
                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                if(Flow4Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   
                
                else:
                    
                    if(Flow3Data != 0):
                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        if(Flow2Data != 0):

                            
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow1Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                if(ID_Categories != 0):


                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    if(ClassificationData != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

        else:
            
            if(Flow5Data != 0):

                if(GaugeClass != 0):

                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    
                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

            else:
                if(Flow4Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   
                
                else:
                    
                    if(Flow3Data != 0):
                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                    else:
                        if(Flow2Data != 0):

                            
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                        else:
                            if(Flow1Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                            else:
                                if(ID_Categories != 0):


                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                else:
                                    if(ClassificationData != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                    else:
                                        
                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   





      
    for row in Masterinstrumentslist_list:
        row_num += 1
        for col_num in range(21):
            if (col_num == 0):
                column_data = row.sinstrumentid
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, column_data, font_style)
            if (col_num == 1):
                column_data = row.sdescription
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, column_data, font_style)
            if (col_num == 2): 
                
                column_data =   str(row.oldinstrument_id) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 3): 
                
                column_data =   str(row.serpcode) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 4): 
                
                column_data =   str(row.splanttype) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 5): 
                
                column_data =   str(row.sassettype) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 6): 
                
                column_data =   str(row.categorytype)  
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 7): 
                
                column_data =  row.scategorytype1 + " : " + str(row.styperefname1)   
                if(column_data is None):
                    column_data = "" 
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 8): 
                
                column_data =   row.scategorytype2 + " : " + str(row.styperefname2) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 9): 
                
                column_data =  row.scategorytype3 + " : " +  str(row.styperefname3)
                if(column_data is None):
                    column_data = ""    
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 10): 
                
                column_data =  row.scategorytype4 + " : " +  str(row.styperefname4) 
                if(column_data is None):
                    column_data = ""   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 11): 
                
                column_data =  row.scategorytype5 + " : " +  str(row.styperefname5)  
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 12): 
                
                column_data =  row.ssizea   
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 13): 
                
                column_data =  row.scurrentstatus   
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 14): 
                
                column_data =  row.slastcalibdate   
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 15): 
                
                column_data =  row.snextcalibdate 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*367)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 16): 
                
                column_data =  row.slocationname   
                if(column_data is None):
                    column_data = ""
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 17): 
                
                column_data =  row.sissueddate 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 18): 
                
                column_data =  row.sreturneddate 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 19): 
                
                column_data =  row.sissuedto 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)
            if (col_num == 20): 
                
                column_data =  row.sissuedmachineto 
                if(column_data is None):
                    column_data = ""  
                cwidth = ws.col(col_num).width
                if (len(column_data)*367) > cwidth:  
                    ws.col(col_num).width = (len(column_data)*150)
                ws.write(row_num, col_num, str(column_data), font_style)







    wb.save(response)

    return response


 




@csrf_exempt
def GaugeScheduler(request):
    return render(request, "CloudCaliber/GaugeScheduler.html")

   
    request.session['ID_Categories'] = 0
    request.session['sFlowCode1']   =""
    request.session['sFlowCode2']   =""
    request.session['sFlowCode3']   =""
    request.session['sFlowCode4']   =""
    request.session['sFlowCode5']   =""
    request.session['sCategoryCode'] = ""
    request.session['categorytype'] = ""
    request.session['styperefname1'] = ""
    request.session['styperefname2'] = ""
    request.session['styperefname3'] = ""
    request.session['styperefname4'] = ""
    request.session['styperefname5'] = ""


 
@csrf_exempt
def GaugeMasterOverDueList(request):

    CurDate = datetime.today().strftime('%Y-%m-%d')
      
    sCodeFinal1 = ""
    sCodeFinal2 = ""
    sCurDateFromA = ""
    sCurDateFrom = ""
    sCurDateTo = ""
 
    

    lPlantIdSelect = 0
    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
 
    lCategoryID = request.session['lCategoryID']                       
    lLoginUserId = request.session['lLoginUserId']  
    semployeename = request.session['semployeename'] 
    semployeeno = request.session['semployeeno']  
    lunitid = request.session['lunitid']  
    sunitno = request.session['sunitno']  
    lcompanyid = request.session['lcompanyid']  
    scompantname = request.session['scompantname']  
    semailaddress = request.session['semailaddress']  
    smobile = request.session['smobile']  

    bSAPCodeDone =0
    bSAPCodeNotDone =0
    ID_Categories =0
    ClassificationData =0
    Flow1Data = 0
    Flow2Data =0
    Flow3Data =0
    Flow4Data =0
    Flow5Data =0
    GaugeClass = 0
    Location  = 0
    txtSearch  = ""
    lcode =0

 
    ID_Categories = request.session['ID_Categories'] 
    ClassificationData = request.session['ClassificationData']  
    Flow1Data = request.session['Flow1Data'] 
    Flow2Data =  request.session['Flow2Data']  
    Flow3Data = request.session['Flow3Data'] 
    Flow4Data = request.session['Flow4Data'] 
    Flow5Data = request.session['Flow5Data'] 
    GaugeClass = request.session['GaugeClass']  
    Location = request.session['Location']   
    txtSearch = request.session['txtSearch']   
    lcode = len(txtSearch)
 


    # if request.session:
    #     request.session.clear()
 
    request.session['bSAPCodeDone']  = 0
    request.session['bSAPCodeNotDone']  = 0
    request.session['ID_Categories']  = 0
    request.session['ClassificationData']  = 0
    request.session['Flow1Data']  = 0
    request.session['Flow2Data']  = 0
    request.session['Flow3Data']  = 0
    request.session['Flow4Data']  = 0
    request.session['Flow5Data']  = 0
    request.session['GaugeClass']  = 0
    request.session['Location']  = 0 
    request.session['txtSearch']  = "" 

    CurDateFrom = datetime.today().strftime('%Y-%m-%d') 

    

    request.session['bSAPCodeDone']  = bSAPCodeDone
    request.session['bSAPCodeNotDone']  = bSAPCodeNotDone
    request.session['ID_Categories']  = ID_Categories
    request.session['ClassificationData']  = ClassificationData
    request.session['Flow1Data']  = Flow1Data
    request.session['Flow2Data']  = Flow2Data
    request.session['Flow3Data']  = Flow3Data
    request.session['Flow4Data']  = Flow4Data
    request.session['Flow5Data']  = Flow5Data
    request.session['GaugeClass']  = GaugeClass
    request.session['Location']  = Location 
    request.session['txtSearch']  = txtSearch 




    request.session['lCategoryID'] = lCategoryID                        
    request.session['lLoginUserId'] = lLoginUserId
    request.session['semployeename'] = semployeename
    request.session['semployeeno'] = semployeeno
    request.session['lunitid'] = lunitid
    request.session['sunitno']  = sunitno
    request.session['lcompanyid']  = lcompanyid
    request.session['scompantname']  = scompantname
    request.session['semailaddress'] = semailaddress
    request.session['smobile']  = smobile

    request.session['badmin'] =0
    request.session['badmin1'] = 0
    request.session['bstores'] = 0
    request.session['bcalibration'] = 0
    request.session['bservice'] = 0
    request.session['bmsa'] = 0
    request.session['bmasterlistonlyallplant'] = 1  
    request.session['breadonly'] =0
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno
 
    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        ID_Categories =0
        ID_Categories =0

        sCodeFinal1 = ""
        sCodeFinal2 = ""
        sPlantCode = ""
        sCategoryCode = ""
        styperefnameA1 = ""
        styperefnameA2 = ""
        styperefnameA3 = ""
        styperefnameA4 = ""
        styperefnameA5 = ""
 
        ID_Categories1 =0
        if 'Categories' in request.POST: 
            if data.get('Categories').isnumeric() :
                ID_Categories1 = int(data.get('Categories'))


        ClassificationData1 =0
        if 'Classification' in request.POST: 
            if data.get('Classification').isnumeric() :
                ClassificationData1= int(data.get('Classification'))


        Flow1Data1 =0
        if 'Flow1' in request.POST: 
            if data.get('Flow1').isnumeric() :
                Flow1Data1 = int(data.get('Flow1'))

        Flow2Data1 =0
        if 'Flow2' in request.POST:  
            if data.get('Flow2').isnumeric() :
                Flow2Data1 = int(data.get('Flow2'))


        Flow3Data1 =0
        if 'Flow3' in request.POST:  
            if data.get('Flow3').isnumeric() :
                Flow3Data1 = int(data.get('Flow3'))


        Flow4Data1 =0
        if 'Flow4' in request.POST:  
            if data.get('Flow4').isnumeric() :
                Flow4Data1 = int(data.get('Flow4'))

        Flow5Data1 =0
        if 'Flow5' in request.POST:  
            if data.get('Flow5').isnumeric() :
                Flow5Data1 = int(data.get('Flow5'))

        GaugeClass1 =0
        if 'GaugeClass' in request.POST:  
            if data.get('GaugeClass').isnumeric() :
                GaugeClass1 = int(data.get('GaugeClass'))
 
        Location1 =0
        if 'Location' in request.POST:  
            if data.get('Location').isnumeric() :
                Location1 = int(data.get('Location'))

        txtSearch1 = ""
        if 'txtSearchID' in request.POST:
            txtSearch1 = data.get("txtSearchID")

        if(ID_Categories1 == 0):
            ID_Categories =0
        else:
            ID_Categories =ID_Categories1

        if(ClassificationData1 == 0):
            ClassificationData =0
        else:
            ClassificationData =ClassificationData1
        if(Flow1Data1 == 0):
            Flow1Data =0
        else:
            Flow1Data =Flow1Data1
        if(Flow2Data1 == 0):
            Flow2Data =0
        else:
            Flow2Data =Flow2Data1
        if(Flow3Data1 == 0):
            Flow3Data =0
        else:
            Flow3Data =Flow3Data1
        if(Flow4Data1 == 0):
            Flow4Data =0
        else:
            Flow4Data =Flow4Data1
        if(Flow5Data1 == 0):
            Flow5Data =0
        else:
            Flow5Data =Flow5Data1
        if(GaugeClass1 == 0):
            GaugeClass =0
        else:
            GaugeClass =GaugeClass1
        if(Location1 == 0):
            Location =0
        else:
            Location =Location1
        if(txtSearch1 == ""):
            txtSearch =""
        else:
            txtSearch =txtSearch1

 
        request.session['ID_Categories']  = ID_Categories
        request.session['ClassificationData']  = ClassificationData
        request.session['Flow1Data']  = Flow1Data
        request.session['Flow2Data']  = Flow2Data
        request.session['Flow3Data']  = Flow3Data
        request.session['Flow4Data']  = Flow4Data
        request.session['Flow5Data']  = Flow5Data
        request.session['GaugeClass']  = GaugeClass
        request.session['Location']  = Location 
        request.session['txtSearch']  = txtSearch  

        request.session['CurDateFrom']  = CurDate 



        if 'cmbGetCategory' in request.POST:  

            #request.session['ID_Classification']  =  ClassificationData 

            #request.session['ID_Categories'] = 0
            #request.session['sFlowCode1']   =""
            #request.session['sFlowCode2']   =""
            #request.session['sFlowCode3']   =""
            #request.session['sFlowCode4']   =""
            #request.session['sFlowCode5']   =""
            sCodeFinal1 = ""
            sCodeFinal2 = ""
         
            sPlantName = request.session['sunitno'] 
            lcompanyid = request.session['lcompanyid']  
            scompantname =  request.session['scompantname']   
            sPlantCode = ""
 

            AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 



            
            if AdminunitlistActive:
                sPlantCode = AdminunitlistActive.splantno 

            sClasscode = ""

            if(ClassificationData != 0):
                Adminassettypelist_list1 =  Adminassetcategorytypelist.objects.get(lcategorytypeid = ClassificationData) 
                tcategoriesLst = Adminassetcategorylist.objects.filter(lassetid= ClassificationData).order_by('categorytype')

                if Adminassettypelist_list1:
                    sClasscode = Adminassettypelist_list1.scode

 
         


            Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
            lunitidA=request.session['lunitid']  
            AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
 



        if 'cmbGetFlow' in request.POST:  

           
        
            lPlantId = request.session['lunitid']  
            sPlantName = request.session['sunitno'] 
            lcompanyid = request.session['lcompanyid']  
            scompantname =  request.session['scompantname']   
 

            AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
            if AdminunitlistActive:
                sPlantCode = AdminunitlistActive.splantno 

            sClasscode = ""

            if(ClassificationData != 0): 
                Adminassettypelist_list1 =  Adminassetcategorytypelist.objects.get(lcategorytypeid = ClassificationData) 
                if Adminassettypelist_list1:
                    sClasscode = Adminassettypelist_list1.scode


            if (ID_Categories == 0):
                styperefnameA1 = ""
            else:
                Adminassetcategorylist_list =  Adminassetcategorylist.objects.get(lcategoryid = ID_Categories) 
                if Adminassetcategorylist_list:
                    sCategoryCode = Adminassetcategorylist_list.scode
                    sClasscode = Adminassetcategorylist_list.styperefname  
                    styperefnameA1 = Adminassetcategorylist_list.styperefname1
                    styperefnameA2 = Adminassetcategorylist_list.styperefname2
                    styperefnameA3 = Adminassetcategorylist_list.styperefname3
                    styperefnameA4 = Adminassetcategorylist_list.styperefname4
                    styperefnameA5 = Adminassetcategorylist_list.styperefname5




        lCode =0
        lcode = len(txtSearch)


        if (lcode != 0):

         
                
            if  (Location != 0):

                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        if(Flow3Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid') 
                                else:
                                    if(ID_Categories != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):

                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                
                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                    else:
                        if(Flow3Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid') 
                                else:
                                    if(ID_Categories != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):

                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   


        else:
 
            if  (Location != 0):

                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   
                    
                    else:
                        
                        if(Flow3Data != 0):
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                               
                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    if(ID_Categories != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):


                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                
                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   
                    
                    else:
                        
                        if(Flow3Data != 0):
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                               
                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                else:
                                    if(ID_Categories != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):


                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   



        request.session['bContFlag'] =0

        request.session['sPlantCode']   = ""
        request.session['cmbClassificationID'] =""
        request.session['cmbCategoryID'] =""
        request.session['cmbgetFlow1ID'] =""
        request.session['cmbgetFlow2ID'] =""
        request.session['cmbgetFlow3ID'] =""
        request.session['cmbgetFlow4ID'] =""
        request.session['cmbgetFlow5ID'] =""
        request.session['cmbgetFlow6ID'] =""
        request.session['getFlow1Code']  =""
        request.session['getFlow2Code']  =""
        request.session['getFlow3Code']  =""
        request.session['getFlow4Code']  =""
        request.session['getFlowContCode']  =""
        request.session['getFlow5Code']  =""
        request.session['sCategoryCode'] = ""
        request.session['categorytype']= ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5']= ""
        request.session['sSAPCode']  = ""
        AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
        if AdminunitlistActive:
            sPlantCode = AdminunitlistActive.splantno
            sPlantNameName = AdminunitlistActive.splantname + " (" + AdminunitlistActive.scode.strip() + ")"
            sPlantNameNameA = AdminunitlistActive.splantname

        request.session['sPlantCode']   =sPlantCode
        





 
             

 


        if (styperefnameA1 == "Part No"):
            Adminassetcategorytypelist1_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        elif (styperefnameA1 == "Equipment"):
            Adminassetcategorytypelist1_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        elif (styperefnameA1 == "Operation"):
            Adminassetcategorytypelist1_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            #return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        elif (styperefnameA1 == "Material"):
            Adminassetcategorytypelist1_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            #return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        else:
            Adminassetcategorytypelist1_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 1).order_by('scategorytype').values()  
                
        if (styperefnameA2 == "Part No"):
            Adminassetcategorytypelist2_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2 })
        elif (styperefnameA2 == "Equipment"):
            Adminassetcategorytypelist2_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            #return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2  })
        elif (styperefnameA2 == "Operation"):
            Adminassetcategorytypelist2_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            #return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2  })
        elif (styperefnameA2 == "Material"):
            Adminassetcategorytypelist2_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            #return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2 })
        else:
            Adminassetcategorytypelist2_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 2).order_by('scategorytype').values()  



        if (styperefnameA3 == "Part No"):
            Adminassetcategorytypelist3_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        elif (styperefnameA3 == "Equipment"):
            Adminassetcategorytypelist3_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        elif (styperefnameA3 == "Operation"):
            Adminassetcategorytypelist3_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        elif (styperefnameA3 == "Material"):
            Adminassetcategorytypelist3_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        else:
            Adminassetcategorytypelist3_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 3).order_by('scategorytype').values()  
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlow3.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':request.session['styperefnameA3'] })

        if (styperefnameA4 == "Part No"):
            Adminassetcategorytypelist4_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4  })
        elif (styperefnameA4 == "Equipment"):
            Adminassetcategorytypelist4_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4  })
        elif (styperefnameA4 == "Operation"):
            Adminassetcategorytypelist4_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4  })
        elif (styperefnameA4 == "Material"):
            Adminassetcategorytypelist4_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4 })
        else:
            Adminassetcategorytypelist4_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 4).order_by('scategorytype').values()  
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlow4.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':request.session['styperefnameA4'] })

        if (styperefnameA5 == "Part No"):
            Adminassetcategorytypelist5_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5  })
        elif (styperefnameA5 == "Equipment"):
            Adminassetcategorytypelist5_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5 })
        elif (styperefnameA5 == "Operation"):
            Adminassetcategorytypelist5_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5 })
        elif (styperefnameA5 == "Material"):
            Adminassetcategorytypelist5_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5 })
        else:
            Adminassetcategorytypelist5_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 5).order_by('scategorytype').values()  
            # return render(request, 'CloudCaliber/GaugeMasterOverDueListCreateID_stypeFlow5.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':request.session['styperefnameA5']  })





        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        tcategoriesLst = Adminassetcategorylist.objects.filter(lassetid= ClassificationData).order_by('categorytype')

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     

        

        # page_number  = request.GET.get('page')

        # lRecCount =0 
        # lRecCount = Masterinstrumentslist_list.count()
        # lRecCount1 =0

        # if (lRecCount > 500): 
        #     lRecCount1 = int((lRecCount * 5/100) )
        # else:
        #     lRecCount1 =lRecCount
            
        # if (lRecCount1 == 0):
        #     lRecCount1 =1
        # paginator = Paginator(Masterinstrumentslist_list, lRecCount1)
        # try:
        #     Masterinstrumentslist_lists = paginator.get_page(page_number )
        # except PageNotAnInteger:
        #     Masterinstrumentslist_lists = paginator.page(1)
        # except EmptyPage:
        #     Masterinstrumentslist_lists = paginator.page(paginator.num_pages)
        

        Adminunitlist_list = Adminunitlist.objects.order_by('splantno')



        return render(request,  'CloudCaliber/GaugeMasterOverDueList.html', 
        {
            'Masterinstrumentslist_lists':Masterinstrumentslist_list, 
            
            'CurDateNow':datetime.today(), 
            'lPlantId':lPlantId,
            '30DateNow':datetime.now() + timedelta(days=30),  
            'AreaofUselist_list':AreaofUselist_list, 
            'Adminunitlist_list':Adminunitlist_list,
            'Location':Location,
            'txtSearch':txtSearch,
            'sPlantName': sPlantName ,  
            'semployeename':  semployeename,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': ClassificationData , 
            'cmbCategoryID': ID_Categories ,  
            'cmbFlow1ID': 0 ,  
            'cmbFlow2ID': 0 ,  
            'cmbFlow3ID': 0 ,  
            'cmbFlow4ID': 0 ,
            'cmbFlow5ID': 0 ,     
            'cmbFlow1label': styperefnameA1,  
            'cmbFlow2label': styperefnameA2,  
            'cmbFlow3label': styperefnameA3,  
            'cmbFlow4label': styperefnameA4,
            'cmbFlow5label': styperefnameA5,    
            'Adminassettypelist_list':Adminassettypelist_list,
            'tcategoriesLst': tcategoriesLst, 
            'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ,
            'Adminassetcategorytypelist2_AddNew1OBJ': Adminassetcategorytypelist2_AddNew1OBJ,
            'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ,
            'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ,
            'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ,
            'bNewID': 0 ,  
            
            }) 

    else: 
         



         
        AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
        if AdminunitlistActive:
            sPlantCode = AdminunitlistActive.splantno
            sPlantNameName = AdminunitlistActive.splantname + " (" + AdminunitlistActive.scode.strip() + ")"
            sPlantNameNameA = AdminunitlistActive.splantname

        request.session['sPlantCode']   =sPlantCode
        
        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     

        Masterinstrumentslist_list =  Masterinstrumentslist.objects.filter (lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')

           
        lRecCount =0 
        lRecCount = Masterinstrumentslist_list.count()
        lRecCount1 =0

        # page_number  = request.GET.get('page')


        # if (lRecCount > 500): 
        #     lRecCount1 = int((lRecCount * 7/100) )
        # else:
        #     lRecCount1 =lRecCount
            
        # if (lRecCount1 == 0):
        #     lRecCount1 =1
        # paginator = Paginator(Masterinstrumentslist_list, lRecCount1)
        # try:
        #     Masterinstrumentslist_lists = paginator.get_page(page_number )
        # except PageNotAnInteger:
        #     Masterinstrumentslist_lists = paginator.page(1)
        # except EmptyPage:
        #     Masterinstrumentslist_lists = paginator.page(paginator.num_pages)
        

        Adminunitlist_list = Adminunitlist.objects.order_by('splantno')




        return render(request,  'CloudCaliber/GaugeMasterOverDueList.html', 
        {
            'Masterinstrumentslist_lists':Masterinstrumentslist_list, 
            
            'CurDateNow':datetime.now(),
            'lPlantId':lPlantId,  
            '30DateNow':datetime.now() + timedelta(days=30),  
            'AreaofUselist_list':AreaofUselist_list,
            'Adminunitlist_list':Adminunitlist_list,
            'title':'User list', 
            'message':'Your User list page.',
            'sPlantName': sPlantName , 
            'Location': 0 , 
            'semployeename':  semployeename,
            'txtSearch': "" , 
            'sCodeFinal1': "" ,  
            'sCodeFinal2': "" ,  
            'cmbClassificationID': 0 , 
            'cmbCategoryID': 0 ,  
            'cmbFlow1ID': 0 ,  
            'cmbFlow2ID': 0 ,  
            'cmbFlow3ID': 0 ,  
            'cmbFlow4ID': 0 ,
            'cmbFlow5ID': 0 ,     
            'cmbFlow1label': "",  
            'cmbFlow2label': "",  
            'cmbFlow3label': "",  
            'cmbFlow4label': "",
            'cmbFlow5label': "",  
            'bNewID': 0 ,  
            'Adminassettypelist_list':Adminassettypelist_list,
        }) 



 
@csrf_exempt
def GaugeMasterDueList(request):

    CurDateFrom = datetime.today().strftime('%Y-%m-%d')
    
    dtCurDateTo = datetime.today() + timedelta(days=30) 
    CurDateTo = dtCurDateTo.strftime('%Y-%m-%d')
  

    sCurDateFrom = CurDateFrom
    sCurDateTo = CurDateTo
    sCurDateFromA = request.session['CurDateFromD']
    sCurDateFrom1 = ""
    sCurDateTo1 = ""
    sCurDateFrom2 = ""
    sCurDateTo2 = ""
    sCurDateFrom3 = ""
    sCurDateTo3 = ""

    CurDate = datetime.now()
      
    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    
    sCurDateFrom1 = ""
    sCurDateTo1 = ""
    sCurDateFrom2 = ""
    sCurDateTo2 = ""
    sCurDateFrom3 = ""
    sCurDateTo3 = ""

    sCurDateFrom2 = str(CurDateFrom)
    sCurDateTo2 = str(CurDateTo)
    sCurDateFrom3 = sCurDateFrom2.split("/")
    sCurDateTo3 = sCurDateTo2.split("/")
    sCurDateFrom = str(CurDateFrom)
    sCurDateTo = str(CurDateTo)

    lPlantIdSelect = 0
    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
 
    lCategoryID = request.session['lCategoryID']                       
    lLoginUserId = request.session['lLoginUserId']  
    semployeename = request.session['semployeename'] 
    semployeeno = request.session['semployeeno']  
    lunitid = request.session['lunitid']  
    sunitno = request.session['sunitno']  
    lcompanyid = request.session['lcompanyid']  
    scompantname = request.session['scompantname']  
    semailaddress = request.session['semailaddress']  
    smobile = request.session['smobile']  

    bSAPCodeDone =0
    bSAPCodeNotDone =0
    ID_Categories =0
    ClassificationData =0
    Flow1Data = 0
    Flow2Data =0
    Flow3Data =0
    Flow4Data =0
    Flow5Data =0
    GaugeClass = 0
    Location  = 0
    txtSearch  = ""
    lcode =0

 
    ID_Categories = request.session['ID_Categories'] 
    ClassificationData = request.session['ClassificationData']  
    Flow1Data = request.session['Flow1Data'] 
    Flow2Data =  request.session['Flow2Data']  
    Flow3Data = request.session['Flow3Data'] 
    Flow4Data = request.session['Flow4Data'] 
    Flow5Data = request.session['Flow5Data'] 
    GaugeClass = request.session['GaugeClass']  
    Location = request.session['Location']   
    txtSearch = request.session['txtSearch']   
    lcode = len(txtSearch)

    if(sCurDateFromA != ""):
        sCurDateFrom =request.session['CurDateFrom']  
        sCurDateTo =request.session['CurDateTo'] 
    else:
        request.session['CurDateFromD'] = sCurDateFromA

    # if request.session:
    #     request.session.clear()
 
    request.session['bSAPCodeDone']  = 0
    request.session['bSAPCodeNotDone']  = 0
    request.session['ID_Categories']  = 0
    request.session['ClassificationData']  = 0
    request.session['Flow1Data']  = 0
    request.session['Flow2Data']  = 0
    request.session['Flow3Data']  = 0
    request.session['Flow4Data']  = 0
    request.session['Flow5Data']  = 0
    request.session['GaugeClass']  = 0
    request.session['Location']  = 0 
    request.session['txtSearch']  = "" 
 
    request.session['CurDateFrom']  = sCurDateFrom
    request.session['CurDateTo']  = sCurDateTo

    request.session['bSAPCodeDone']  = bSAPCodeDone
    request.session['bSAPCodeNotDone']  = bSAPCodeNotDone
    request.session['ID_Categories']  = ID_Categories
    request.session['ClassificationData']  = ClassificationData
    request.session['Flow1Data']  = Flow1Data
    request.session['Flow2Data']  = Flow2Data
    request.session['Flow3Data']  = Flow3Data
    request.session['Flow4Data']  = Flow4Data
    request.session['Flow5Data']  = Flow5Data
    request.session['GaugeClass']  = GaugeClass
    request.session['Location']  = Location 
    request.session['txtSearch']  = txtSearch 




    request.session['lCategoryID'] = lCategoryID                        
    request.session['lLoginUserId'] = lLoginUserId
    request.session['semployeename'] = semployeename
    request.session['semployeeno'] = semployeeno
    request.session['lunitid'] = lunitid
    request.session['sunitno']  = sunitno
    request.session['lcompanyid']  = lcompanyid
    request.session['scompantname']  = scompantname
    request.session['semailaddress'] = semailaddress
    request.session['smobile']  = smobile

    request.session['badmin'] =0
    request.session['badmin1'] = 0
    request.session['bstores'] = 0
    request.session['bcalibration'] = 0
    request.session['bservice'] = 0
    request.session['bmsa'] = 0
    request.session['bmasterlistonlyallplant'] = 1  
    request.session['breadonly'] =0
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno
 
    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        ID_Categories =0
        ID_Categories =0

        sCodeFinal1 = ""
        sCodeFinal2 = ""
        sPlantCode = ""
        sCategoryCode = ""
        styperefnameA1 = ""
        styperefnameA2 = ""
        styperefnameA3 = ""
        styperefnameA4 = ""
        styperefnameA5 = ""
 

        if 'txtCurDateFrom' in request.POST:  
            sCurDateFrom = data.get('txtCurDateFrom')



        if 'txtCurDateTo' in request.POST:  
            sCurDateTo = data.get('txtCurDateTo')
          
        sCurDateFrom3 = sCurDateFrom.split("/")
        sCurDateTo3 = sCurDateFrom.split("/") 
    

        if(len(sCurDateFrom3) > 1):
            sCurDateFrom2 = sCurDateFrom3[2] + "-" + sCurDateFrom3[1] + "-" + sCurDateFrom3[0]
        else:
            sCurDateFrom3  = sCurDateFrom.split("-") 
            if(len(sCurDateFrom3) > 1):
                sCurDateFrom2 = sCurDateFrom3[2] + "-" + sCurDateFrom3[1] + "-" + sCurDateFrom3[0] 
        
        if(len(sCurDateTo3) > 1):
            sCurDateTo2 = sCurDateTo3[2] + "-" + sCurDateTo3[1] + "-" + sCurDateTo3[0] 
        else:
            sCurDateTo3  = sCurDateTo.split("-")
        
            if(len(sCurDateTo3) > 1):
                sCurDateTo2 = sCurDateTo3[2] + "-" + sCurDateTo3[1] + "-" + sCurDateTo3[0] 

        request.session['CurDateFrom']  = sCurDateFrom
        request.session['CurDateTo']  = sCurDateTo


        CurDateFrom = datetime.strptime(sCurDateFrom2, '%d-%m-%Y').date()
        CurDateTo = datetime.strptime(sCurDateTo2, '%d-%m-%Y').date()



        ID_Categories1 =0
        if 'Categories' in request.POST: 
            if data.get('Categories').isnumeric() :
                ID_Categories1 = int(data.get('Categories'))


        ClassificationData1 =0
        if 'Classification' in request.POST: 
            if data.get('Classification').isnumeric() :
                ClassificationData1= int(data.get('Classification'))


        Flow1Data1 =0
        if 'Flow1' in request.POST: 
            if data.get('Flow1').isnumeric() :
                Flow1Data1 = int(data.get('Flow1'))

        Flow2Data1 =0
        if 'Flow2' in request.POST:  
            if data.get('Flow2').isnumeric() :
                Flow2Data1 = int(data.get('Flow2'))


        Flow3Data1 =0
        if 'Flow3' in request.POST:  
            if data.get('Flow3').isnumeric() :
                Flow3Data1 = int(data.get('Flow3'))


        Flow4Data1 =0
        if 'Flow4' in request.POST:  
            if data.get('Flow4').isnumeric() :
                Flow4Data1 = int(data.get('Flow4'))

        Flow5Data1 =0
        if 'Flow5' in request.POST:  
            if data.get('Flow5').isnumeric() :
                Flow5Data1 = int(data.get('Flow5'))

        GaugeClass1 =0
        if 'GaugeClass' in request.POST:  
            if data.get('GaugeClass').isnumeric() :
                GaugeClass1 = int(data.get('GaugeClass'))
 
        Location1 =0
        if 'Location' in request.POST:  
            if data.get('Location').isnumeric() :
                Location1 = int(data.get('Location'))

        txtSearch1 = ""
        if 'txtSearchID' in request.POST:
            txtSearch1 = data.get("txtSearchID")

        if(ID_Categories1 == 0):
            ID_Categories =0
        else:
            ID_Categories =ID_Categories1

        if(ClassificationData1 == 0):
            ClassificationData =0
        else:
            ClassificationData =ClassificationData1
        if(Flow1Data1 == 0):
            Flow1Data =0
        else:
            Flow1Data =Flow1Data1
        if(Flow2Data1 == 0):
            Flow2Data =0
        else:
            Flow2Data =Flow2Data1
        if(Flow3Data1 == 0):
            Flow3Data =0
        else:
            Flow3Data =Flow3Data1
        if(Flow4Data1 == 0):
            Flow4Data =0
        else:
            Flow4Data =Flow4Data1
        if(Flow5Data1 == 0):
            Flow5Data =0
        else:
            Flow5Data =Flow5Data1
        if(GaugeClass1 == 0):
            GaugeClass =0
        else:
            GaugeClass =GaugeClass1
        if(Location1 == 0):
            Location =0
        else:
            Location =Location1
        if(txtSearch1 == ""):
            txtSearch =""
        else:
            txtSearch =txtSearch1

 
        request.session['ID_Categories']  = ID_Categories
        request.session['ClassificationData']  = ClassificationData
        request.session['Flow1Data']  = Flow1Data
        request.session['Flow2Data']  = Flow2Data
        request.session['Flow3Data']  = Flow3Data
        request.session['Flow4Data']  = Flow4Data
        request.session['Flow5Data']  = Flow5Data
        request.session['GaugeClass']  = GaugeClass
        request.session['Location']  = Location 
        request.session['txtSearch']  = txtSearch  
 



        if 'cmbGetCategory' in request.POST:  

            #request.session['ID_Classification']  =  ClassificationData 

            #request.session['ID_Categories'] = 0
            #request.session['sFlowCode1']   =""
            #request.session['sFlowCode2']   =""
            #request.session['sFlowCode3']   =""
            #request.session['sFlowCode4']   =""
            #request.session['sFlowCode5']   =""
            sCodeFinal1 = ""
            sCodeFinal2 = ""
         
            sPlantName = request.session['sunitno'] 
            lcompanyid = request.session['lcompanyid']  
            scompantname =  request.session['scompantname']   
            sPlantCode = ""
 

            AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 



            
            if AdminunitlistActive:
                sPlantCode = AdminunitlistActive.splantno 

            sClasscode = ""

            if(ClassificationData != 0):
                Adminassettypelist_list1 =  Adminassetcategorytypelist.objects.get(lcategorytypeid = ClassificationData) 
                tcategoriesLst = Adminassetcategorylist.objects.filter(lassetid= ClassificationData).order_by('categorytype')

                if Adminassettypelist_list1:
                    sClasscode = Adminassettypelist_list1.scode

 
         


            Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
            lunitidA=request.session['lunitid']  
            AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
 



        if 'cmbGetFlow' in request.POST:  

           
        
            lPlantId = request.session['lunitid']  
            sPlantName = request.session['sunitno'] 
            lcompanyid = request.session['lcompanyid']  
            scompantname =  request.session['scompantname']   
 

            AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
            if AdminunitlistActive:
                sPlantCode = AdminunitlistActive.splantno 

            sClasscode = ""

            if(ClassificationData != 0): 
                Adminassettypelist_list1 =  Adminassetcategorytypelist.objects.get(lcategorytypeid = ClassificationData) 
                if Adminassettypelist_list1:
                    sClasscode = Adminassettypelist_list1.scode


            if (ID_Categories == 0):
                styperefnameA1 = ""
            else:
                Adminassetcategorylist_list =  Adminassetcategorylist.objects.get(lcategoryid = ID_Categories) 
                if Adminassetcategorylist_list:
                    sCategoryCode = Adminassetcategorylist_list.scode
                    sClasscode = Adminassetcategorylist_list.styperefname  
                    styperefnameA1 = Adminassetcategorylist_list.styperefname1
                    styperefnameA2 = Adminassetcategorylist_list.styperefname2
                    styperefnameA3 = Adminassetcategorylist_list.styperefname3
                    styperefnameA4 = Adminassetcategorylist_list.styperefname4
                    styperefnameA5 = Adminassetcategorylist_list.styperefname5




        lCode =0
        lcode = len(txtSearch)


        if (lcode != 0):

         
                
            if  (Location != 0):

                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        if(Flow3Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid') 
                                else:
                                    if(ID_Categories != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):

                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                
                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                    else:
                        if(Flow3Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid') 
                                else:
                                    if(ID_Categories != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):

                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   


        else:
 
            if  (Location != 0):

                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   
                    
                    else:
                        
                        if(Flow3Data != 0):
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                               
                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    if(ID_Categories != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):


                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                
                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   
                    
                    else:
                        
                        if(Flow3Data != 0):
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                               
                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                else:
                                    if(ID_Categories != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):


                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__lte=CurDate).order_by('sinstrumentid')   



        request.session['bContFlag'] =0

        request.session['sPlantCode']   = ""
        request.session['cmbClassificationID'] =""
        request.session['cmbCategoryID'] =""
        request.session['cmbgetFlow1ID'] =""
        request.session['cmbgetFlow2ID'] =""
        request.session['cmbgetFlow3ID'] =""
        request.session['cmbgetFlow4ID'] =""
        request.session['cmbgetFlow5ID'] =""
        request.session['cmbgetFlow6ID'] =""
        request.session['getFlow1Code']  =""
        request.session['getFlow2Code']  =""
        request.session['getFlow3Code']  =""
        request.session['getFlow4Code']  =""
        request.session['getFlowContCode']  =""
        request.session['getFlow5Code']  =""
        request.session['sCategoryCode'] = ""
        request.session['categorytype']= ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5']= ""
        request.session['sSAPCode']  = ""
        AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
        if AdminunitlistActive:
            sPlantCode = AdminunitlistActive.splantno
            sPlantNameName = AdminunitlistActive.splantname + " (" + AdminunitlistActive.scode.strip() + ")"
            sPlantNameNameA = AdminunitlistActive.splantname

        request.session['sPlantCode']   =sPlantCode
        





 
             

 


        if (styperefnameA1 == "Part No"):
            Adminassetcategorytypelist1_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        elif (styperefnameA1 == "Equipment"):
            Adminassetcategorytypelist1_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        elif (styperefnameA1 == "Operation"):
            Adminassetcategorytypelist1_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        elif (styperefnameA1 == "Material"):
            Adminassetcategorytypelist1_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        else:
            Adminassetcategorytypelist1_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 1).order_by('scategorytype').values()  
                
        if (styperefnameA2 == "Part No"):
            Adminassetcategorytypelist2_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2 })
        elif (styperefnameA2 == "Equipment"):
            Adminassetcategorytypelist2_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2  })
        elif (styperefnameA2 == "Operation"):
            Adminassetcategorytypelist2_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2  })
        elif (styperefnameA2 == "Material"):
            Adminassetcategorytypelist2_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2 })
        else:
            Adminassetcategorytypelist2_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 2).order_by('scategorytype').values()  



        if (styperefnameA3 == "Part No"):
            Adminassetcategorytypelist3_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        elif (styperefnameA3 == "Equipment"):
            Adminassetcategorytypelist3_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        elif (styperefnameA3 == "Operation"):
            Adminassetcategorytypelist3_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        elif (styperefnameA3 == "Material"):
            Adminassetcategorytypelist3_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        else:
            Adminassetcategorytypelist3_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 3).order_by('scategorytype').values()  
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlow3.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':request.session['styperefnameA3'] })

        if (styperefnameA4 == "Part No"):
            Adminassetcategorytypelist4_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4  })
        elif (styperefnameA4 == "Equipment"):
            Adminassetcategorytypelist4_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4  })
        elif (styperefnameA4 == "Operation"):
            Adminassetcategorytypelist4_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4  })
        elif (styperefnameA4 == "Material"):
            Adminassetcategorytypelist4_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4 })
        else:
            Adminassetcategorytypelist4_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 4).order_by('scategorytype').values()  
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlow4.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':request.session['styperefnameA4'] })

        if (styperefnameA5 == "Part No"):
            Adminassetcategorytypelist5_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5  })
        elif (styperefnameA5 == "Equipment"):
            Adminassetcategorytypelist5_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5 })
        elif (styperefnameA5 == "Operation"):
            Adminassetcategorytypelist5_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5 })
        elif (styperefnameA5 == "Material"):
            Adminassetcategorytypelist5_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5 })
        else:
            Adminassetcategorytypelist5_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 5).order_by('scategorytype').values()  
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlow5.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':request.session['styperefnameA5']  })





        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        tcategoriesLst = Adminassetcategorylist.objects.filter(lassetid= ClassificationData).order_by('categorytype')

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     

        

        # page_number  = request.GET.get('page')

        # lRecCount =0 
        # lRecCount = Masterinstrumentslist_list.count()
        # lRecCount1 =0

        # if (lRecCount > 500): 
        #     lRecCount1 = int((lRecCount * 5/100) )
        # else:
        #     lRecCount1 =lRecCount
            
        # if (lRecCount1 == 0):
        #     lRecCount1 =1
        # paginator = Paginator(Masterinstrumentslist_list, lRecCount1)
        # try:
        #     Masterinstrumentslist_lists = paginator.get_page(page_number )
        # except PageNotAnInteger:
        #     Masterinstrumentslist_lists = paginator.page(1)
        # except EmptyPage:
        #     Masterinstrumentslist_lists = paginator.page(paginator.num_pages)
        

        Adminunitlist_list = Adminunitlist.objects.order_by('splantno')

        CurDate1 = datetime.now()
        CurDate1 

        return render(request,  'CloudCaliber/GaugeMasterDueList.html', 
        {
            'Masterinstrumentslist_lists':Masterinstrumentslist_list, 
            
            'CurDateNow':CurDate, 
            'lPlantId':lPlantId,
            '30DateNow':datetime.now() + timedelta(days=30),  
            'AreaofUselist_list':AreaofUselist_list, 
            'Adminunitlist_list':Adminunitlist_list,
            'Location':Location,
            'txtSearch':txtSearch,
            'sPlantName': sPlantName ,  
            'semployeename':  semployeename,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': ClassificationData , 
            'cmbCategoryID': ID_Categories ,  
            'CurDateFrom': sCurDateFrom,     
            'CurDateTo': sCurDateTo,
            'cmbFlow1ID': 0 ,  
            'cmbFlow2ID': 0 ,  
            'cmbFlow3ID': 0 ,  
            'cmbFlow4ID': 0 ,
            'cmbFlow5ID': 0 ,     
            'cmbFlow1label': styperefnameA1,  
            'cmbFlow2label': styperefnameA2,  
            'cmbFlow3label': styperefnameA3,  
            'cmbFlow4label': styperefnameA4,
            'cmbFlow5label': styperefnameA5,    
            'Adminassettypelist_list':Adminassettypelist_list,
            'tcategoriesLst': tcategoriesLst, 
            'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ,
            'Adminassetcategorytypelist2_AddNew1OBJ': Adminassetcategorytypelist2_AddNew1OBJ,
            'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ,
            'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ,
            'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ,
            'bNewID': 0 ,  
            
            }) 

    else: 
         



         
        AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
        if AdminunitlistActive:
            sPlantCode = AdminunitlistActive.splantno
            sPlantNameName = AdminunitlistActive.splantname + " (" + AdminunitlistActive.scode.strip() + ")"
            sPlantNameNameA = AdminunitlistActive.splantname

        request.session['sPlantCode']   =sPlantCode
        
        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     

        Masterinstrumentslist_list =  Masterinstrumentslist.objects.filter (lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,   dtnextcalib__gte=CurDateFrom,   dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')

           
        lRecCount =0 
        lRecCount = Masterinstrumentslist_list.count()
        lRecCount1 =0

        # page_number  = request.GET.get('page')


        # if (lRecCount > 500): 
        #     lRecCount1 = int((lRecCount * 7/100) )
        # else:
        #     lRecCount1 =lRecCount
            
        # if (lRecCount1 == 0):
        #     lRecCount1 =1
        # paginator = Paginator(Masterinstrumentslist_list, lRecCount1)
        # try:
        #     Masterinstrumentslist_lists = paginator.get_page(page_number )
        # except PageNotAnInteger:
        #     Masterinstrumentslist_lists = paginator.page(1)
        # except EmptyPage:
        #     Masterinstrumentslist_lists = paginator.page(paginator.num_pages)
        

        Adminunitlist_list = Adminunitlist.objects.order_by('splantno')




        return render(request,  'CloudCaliber/GaugeMasterDueList.html', 
        {
            'Masterinstrumentslist_lists':Masterinstrumentslist_list, 
            
            'CurDateNow':datetime.now(),
            'lPlantId':lPlantId,  
            '30DateNow':datetime.now() + timedelta(days=30),  
            'AreaofUselist_list':AreaofUselist_list,
            'Adminunitlist_list':Adminunitlist_list,
            'title':'User list', 
            'message':'Your User list page.',
            'sPlantName': sPlantName , 
            'Location': 0 , 
            'semployeename':  semployeename,
            'txtSearch': "" , 
            'sCodeFinal1': "" ,      
            'CurDateFrom': sCurDateFrom,     
            'CurDateTo': sCurDateTo,
            'sCodeFinal2': "" ,  
            'cmbClassificationID': 0 , 
            'cmbCategoryID': 0 ,  
            'cmbFlow1ID': 0 ,  
            'cmbFlow2ID': 0 ,  
            'cmbFlow3ID': 0 ,  
            'cmbFlow4ID': 0 ,
            'cmbFlow5ID': 0 ,     
            'cmbFlow1label': "",  
            'cmbFlow2label': "",  
            'cmbFlow3label': "",  
            'cmbFlow4label': "",
            'cmbFlow5label': "",  
            'bNewID': 0 ,  
            'Adminassettypelist_list':Adminassettypelist_list,
        }) 






 
@csrf_exempt
def GaugeMasterDueList1(request):

    CurDateFrom = datetime.today().strftime('%Y-%m-%d')
    
    dtCurDateTo = datetime.today() + timedelta(days=30) 
    CurDateTo = dtCurDateTo.strftime('%Y-%m-%d')


    sCurDateFrom = ""
    sCurDateTo = ""
    sCurDateFrom1 = ""
    sCurDateTo1 = ""
    sCurDateFrom2 = ""
    sCurDateTo2 = ""
    sCurDateFrom3 = ""
    sCurDateTo3 = ""

    sCurDateFrom2 = str(CurDateFrom)
    sCurDateTo2 = str(CurDateTo)
    sCurDateFrom3 = sCurDateFrom2.split("/")
    sCurDateTo3 = sCurDateTo2.split("/")
    sCurDateFrom = str(CurDateFrom)
    sCurDateTo = str(CurDateTo)
   

    # if(len(sCurDateFrom3) > 1):
    #     sCurDateFrom = sCurDateFrom3[2] + "-" + sCurDateFrom3[1] + "-" + sCurDateFrom3[0]
    # else:
    #     sCurDateFrom3  = sCurDateFrom2.split("-") 
    #     if(len(sCurDateFrom3) > 1):
    #         sCurDateFrom = sCurDateFrom3[2] + "-" + sCurDateFrom3[1] + "-" + sCurDateFrom3[0] 
    
    # if(len(sCurDateTo3) > 1):
    #     sCurDateTo = sCurDateTo3[2] + "-" + sCurDateTo3[1] + "-" + sCurDateTo3[0] 
    # else:
    #     sCurDateTo3  = sCurDateTo2.split("-")
    
    #     if(len(sCurDateTo3) > 1):
    #         sCurDateTo = sCurDateTo3[2] + "-" + sCurDateTo3[1] + "-" + sCurDateTo3[0] 





      
    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantIdSelect = 0
    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
 
    lCategoryID = request.session['lCategoryID']                       
    lLoginUserId = request.session['lLoginUserId']  
    semployeename = request.session['semployeename'] 
    semployeeno = request.session['semployeeno']  
    lunitid = request.session['lunitid']  
    sunitno = request.session['sunitno']  
    lcompanyid = request.session['lcompanyid']  
    scompantname = request.session['scompantname']  
    semailaddress = request.session['semailaddress']  
    smobile = request.session['smobile']  

    bSAPCodeDone =0
    bSAPCodeNotDone =0
    ID_Categories =0
    ClassificationData =0
    Flow1Data = 0
    Flow2Data =0
    Flow3Data =0
    Flow4Data =0
    Flow5Data =0
    GaugeClass = 0
    Location  = 0
    txtSearch  = ""
    lcode =0
    ID_Categories = request.session['ID_Categories'] 
    ClassificationData = request.session['ClassificationData']  
    Flow1Data = request.session['Flow1Data'] 
    Flow2Data =  request.session['Flow2Data']  
    Flow3Data = request.session['Flow3Data'] 
    Flow4Data = request.session['Flow4Data'] 
    Flow5Data = request.session['Flow5Data'] 
    GaugeClass = request.session['GaugeClass']  
    Location = request.session['Location']   
    txtSearch = request.session['txtSearch']   
    lcode = len(txtSearch)

    
    dCurDateFrom = datetime.today().strftime('%Y-%m-%d')
    
    dCurDateTo = datetime.today() + timedelta(days=30) 

    dCurDateFrom = request.session['CurDateFrom']  
    dCurDateTo =request.session['CurDateTo']  


    # if request.session:
    #     request.session.clear()
 
    # request.session['bSAPCodeDone']  = 0
    # request.session['bSAPCodeNotDone']  = 0
    # request.session['ID_Categories']  = 0
    # request.session['ClassificationData']  = 0
    # request.session['Flow1Data']  = 0
    # request.session['Flow2Data']  = 0
    # request.session['Flow3Data']  = 0
    # request.session['Flow4Data']  = 0
    # request.session['Flow5Data']  = 0
    # request.session['GaugeClass']  = 0
    # request.session['Location']  = 0 
    # request.session['txtSearch']  = "" 

    # CurDateFrom = datetime.today().strftime('%Y-%m-%d')
    # request.session['CurDateFrom']  = CurDateFrom
    # request.session['CurDateTo']  = CurDateFrom
    # request.session['bSAPCodeDone']  = bSAPCodeDone
    # request.session['bSAPCodeNotDone']  = bSAPCodeNotDone
    # request.session['ID_Categories']  = ID_Categories
    # request.session['ClassificationData']  = ClassificationData
    # request.session['Flow1Data']  = Flow1Data
    # request.session['Flow2Data']  = Flow2Data
    # request.session['Flow3Data']  = Flow3Data
    # request.session['Flow4Data']  = Flow4Data
    # request.session['Flow5Data']  = Flow5Data
    # request.session['GaugeClass']  = GaugeClass
    # request.session['Location']  = Location 
    # request.session['txtSearch']  = txtSearch 
    
    # request.session['CurDateFrom']  = dCurDateFrom
    # request.session['CurDateTo']  = dCurDateTo
 
    request.session['lCategoryID'] = lCategoryID                        
    request.session['lLoginUserId'] = lLoginUserId
    request.session['semployeename'] = semployeename
    request.session['semployeeno'] = semployeeno
    request.session['lunitid'] = lunitid
    request.session['sunitno']  = sunitno
    request.session['lcompanyid']  = lcompanyid
    request.session['scompantname']  = scompantname
    request.session['semailaddress'] = semailaddress
    request.session['smobile']  = smobile

    request.session['badmin'] =0
    request.session['badmin1'] = 0
    request.session['bstores'] = 0
    request.session['bcalibration'] = 0
    request.session['bservice'] = 0
    request.session['bmsa'] = 0
    request.session['bmasterlistonlyallplant'] = 1  
    request.session['breadonly'] =0
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno
 
    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        ID_Categories =0
        ID_Categories =0

        sCodeFinal1 = ""
        sCodeFinal2 = ""
        sPlantCode = ""
        sCategoryCode = ""
        styperefnameA1 = ""
        styperefnameA2 = ""
        styperefnameA3 = ""
        styperefnameA4 = ""
        styperefnameA5 = ""
 

        if 'txtCurDateFrom' in request.POST:  
            sCurDateFrom = data.get('txtCurDateFrom')



        if 'txtCurDateTo' in request.POST:  
            sCurDateTo = data.get('txtCurDateTo')
          
        sCurDateFrom3 = sCurDateFrom.split("/")
        sCurDateTo3 = sCurDateFrom.split("/") 
    

        if(len(sCurDateFrom3) > 1):
            sCurDateFrom2 = sCurDateFrom3[2] + "-" + sCurDateFrom3[1] + "-" + sCurDateFrom3[0]
        else:
            sCurDateFrom3  = sCurDateFrom.split("-") 
            if(len(sCurDateFrom3) > 1):
                sCurDateFrom2 = sCurDateFrom3[2] + "-" + sCurDateFrom3[1] + "-" + sCurDateFrom3[0] 
        
        if(len(sCurDateTo3) > 1):
            sCurDateTo2 = sCurDateTo3[2] + "-" + sCurDateTo3[1] + "-" + sCurDateTo3[0] 
        else:
            sCurDateTo3  = sCurDateTo.split("-")
        
            if(len(sCurDateTo3) > 1):
                sCurDateTo2 = sCurDateTo3[2] + "-" + sCurDateTo3[1] + "-" + sCurDateTo3[0] 



        CurDateFrom = datetime.strptime(sCurDateFrom2, '%d-%m-%Y').date()
        CurDateTo = datetime.strptime(sCurDateTo2, '%d-%m-%Y').date()


        ID_Categories1 =0
        if 'Categories' in request.POST: 
            if data.get('Categories').isnumeric() :
                ID_Categories1 = int(data.get('Categories'))


        ClassificationData1 =0
        if 'Classification' in request.POST: 
            if data.get('Classification').isnumeric() :
                ClassificationData1= int(data.get('Classification'))


        Flow1Data1 =0
        if 'Flow1' in request.POST: 
            if data.get('Flow1').isnumeric() :
                Flow1Data1 = int(data.get('Flow1'))

        Flow2Data1 =0
        if 'Flow2' in request.POST:  
            if data.get('Flow2').isnumeric() :
                Flow2Data1 = int(data.get('Flow2'))


        Flow3Data1 =0
        if 'Flow3' in request.POST:  
            if data.get('Flow3').isnumeric() :
                Flow3Data1 = int(data.get('Flow3'))


        Flow4Data1 =0
        if 'Flow4' in request.POST:  
            if data.get('Flow4').isnumeric() :
                Flow4Data1 = int(data.get('Flow4'))

        Flow5Data1 =0
        if 'Flow5' in request.POST:  
            if data.get('Flow5').isnumeric() :
                Flow5Data1 = int(data.get('Flow5'))

        GaugeClass1 =0
        if 'GaugeClass' in request.POST:  
            if data.get('GaugeClass').isnumeric() :
                GaugeClass1 = int(data.get('GaugeClass'))
 
        Location1 =0
        if 'Location' in request.POST:  
            if data.get('Location').isnumeric() :
                Location1 = int(data.get('Location'))

        txtSearch1 = ""
        if 'txtSearchID' in request.POST:
            txtSearch1 = data.get("txtSearchID")

        if(ID_Categories1 == 0):
            ID_Categories =0
        else:
            ID_Categories =ID_Categories1

        if(ClassificationData1 == 0):
            ClassificationData =0
        else:
            ClassificationData =ClassificationData1
        if(Flow1Data1 == 0):
            Flow1Data =0
        else:
            Flow1Data =Flow1Data1
        if(Flow2Data1 == 0):
            Flow2Data =0
        else:
            Flow2Data =Flow2Data1
        if(Flow3Data1 == 0):
            Flow3Data =0
        else:
            Flow3Data =Flow3Data1
        if(Flow4Data1 == 0):
            Flow4Data =0
        else:
            Flow4Data =Flow4Data1
        if(Flow5Data1 == 0):
            Flow5Data =0
        else:
            Flow5Data =Flow5Data1
        if(GaugeClass1 == 0):
            GaugeClass =0
        else:
            GaugeClass =GaugeClass1
        if(Location1 == 0):
            Location =0
        else:
            Location =Location1
        if(txtSearch1 == ""):
            txtSearch =""
        else:
            txtSearch =txtSearch1


 
        request.session['ID_Categories']  = ID_Categories
        request.session['ClassificationData']  = ClassificationData
        request.session['Flow1Data']  = Flow1Data
        request.session['Flow2Data']  = Flow2Data
        request.session['Flow3Data']  = Flow3Data
        request.session['Flow4Data']  = Flow4Data
        request.session['Flow5Data']  = Flow5Data
        request.session['GaugeClass']  = GaugeClass
        request.session['Location']  = Location 
        request.session['txtSearch']  = txtSearch  

        request.session['CurDateFrom']  = CurDateFrom
        request.session['CurDateTo']  = CurDateTo


        if 'cmbGetCategory' in request.POST:  

            #request.session['ID_Classification']  =  ClassificationData 

            #request.session['ID_Categories'] = 0
            #request.session['sFlowCode1']   =""
            #request.session['sFlowCode2']   =""
            #request.session['sFlowCode3']   =""
            #request.session['sFlowCode4']   =""
            #request.session['sFlowCode5']   =""
            sCodeFinal1 = ""
            sCodeFinal2 = ""
         
            sPlantName = request.session['sunitno'] 
            lcompanyid = request.session['lcompanyid']  
            scompantname =  request.session['scompantname']   
            sPlantCode = ""
 

            AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 



            
            if AdminunitlistActive:
                sPlantCode = AdminunitlistActive.splantno 

            sClasscode = ""

            if(ClassificationData != 0):
                Adminassettypelist_list1 =  Adminassetcategorytypelist.objects.get(lcategorytypeid = ClassificationData) 
                tcategoriesLst = Adminassetcategorylist.objects.filter(lassetid= ClassificationData).order_by('categorytype')

                if Adminassettypelist_list1:
                    sClasscode = Adminassettypelist_list1.scode

 
         


            Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
            lunitidA=request.session['lunitid']  
            AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
 



        if 'cmbGetFlow' in request.POST:  

           
        
            lPlantId = request.session['lunitid']  
            sPlantName = request.session['sunitno'] 
            lcompanyid = request.session['lcompanyid']  
            scompantname =  request.session['scompantname']   
 

            AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
            if AdminunitlistActive:
                sPlantCode = AdminunitlistActive.splantno 

            sClasscode = ""

            if(ClassificationData != 0): 
                Adminassettypelist_list1 =  Adminassetcategorytypelist.objects.get(lcategorytypeid = ClassificationData) 
                if Adminassettypelist_list1:
                    sClasscode = Adminassettypelist_list1.scode


            if (ID_Categories == 0):
                styperefnameA1 = ""
            else:
                Adminassetcategorylist_list =  Adminassetcategorylist.objects.get(lcategoryid = ID_Categories) 
                if Adminassetcategorylist_list:
                    sCategoryCode = Adminassetcategorylist_list.scode
                    sClasscode = Adminassetcategorylist_list.styperefname  
                    styperefnameA1 = Adminassetcategorylist_list.styperefname1
                    styperefnameA2 = Adminassetcategorylist_list.styperefname2
                    styperefnameA3 = Adminassetcategorylist_list.styperefname3
                    styperefnameA4 = Adminassetcategorylist_list.styperefname4
                    styperefnameA5 = Adminassetcategorylist_list.styperefname5




        lCode =0
        lcode = len(txtSearch)


        if (lcode != 0):

         
                
            if  (Location != 0):

                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        if(Flow3Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid') 
                                else:
                                    if(ID_Categories != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):

                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                
                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,   dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                    else:
                        if(Flow3Data != 0):

                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid') 
                                else:
                                    if(ID_Categories != 0):

                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):

                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sinstrumentid__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sdescription__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(sassettype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(splanttype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(categorytype__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname1__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname2__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname3__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location ) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname4__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(styperefname5__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(smake__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(slocationname__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(scurrentstatus__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(spartno__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo) | Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter(oldinstrument_id__icontains=txtSearch, lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')   


        else:
 
            if  (Location != 0):

                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, ldefaultlocationid=Location).order_by('sinstrumentid')   
                    
                    else:
                        
                        if(Flow3Data != 0):
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                               
                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                else:
                                    if(ID_Categories != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):


                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, ldefaultlocationid=Location).order_by('sinstrumentid')   

            else:
                
                if(Flow5Data != 0):

                    if(GaugeClass != 0):

                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                    else:
                        
                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data, lfolowid5=Flow5Data).order_by('sinstrumentid')   

                else:
                    if(Flow4Data != 0):

                        if(GaugeClass != 0):

                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   

                        else:
                            
                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data, lfolowid4=Flow4Data).order_by('sinstrumentid')   
                    
                    else:
                        
                        if(Flow3Data != 0):
                            if(GaugeClass != 0):

                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                            else:
                                
                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data, lfolowid3=Flow3Data).order_by('sinstrumentid')   

                        else:
                            if(Flow2Data != 0):

                               
                                if(GaugeClass != 0):

                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                                else:
                                    
                                    Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data, lfolowid2=Flow2Data).order_by('sinstrumentid')   

                            else:
                                if(Flow1Data != 0):

                                    if(GaugeClass != 0):

                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                    else:
                                        
                                        Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories, lfolowid1=Flow1Data).order_by('sinstrumentid')   

                                else:
                                    if(ID_Categories != 0):


                                        if(GaugeClass != 0):

                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                        else:
                                            
                                            Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData, lcategoryid=ID_Categories).order_by('sinstrumentid')   

                                    else:
                                        if(ClassificationData != 0):


                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo, lassetid=ClassificationData).order_by('sinstrumentid')   

                                        else:
                                            
                                            if(GaugeClass != 0):

                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')   

                                            else:
                                                
                                                Masterinstrumentslist_list =  Masterinstrumentslist.objects.exclude(snextcalibdate ="").filter( lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,    dtnextcalib__gte=CurDateFrom,  dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')   



        request.session['bContFlag'] =0

        request.session['sPlantCode']   = ""
        request.session['cmbClassificationID'] =""
        request.session['cmbCategoryID'] =""
        request.session['cmbgetFlow1ID'] =""
        request.session['cmbgetFlow2ID'] =""
        request.session['cmbgetFlow3ID'] =""
        request.session['cmbgetFlow4ID'] =""
        request.session['cmbgetFlow5ID'] =""
        request.session['cmbgetFlow6ID'] =""
        request.session['getFlow1Code']  =""
        request.session['getFlow2Code']  =""
        request.session['getFlow3Code']  =""
        request.session['getFlow4Code']  =""
        request.session['getFlowContCode']  =""
        request.session['getFlow5Code']  =""
        request.session['sCategoryCode'] = ""
        request.session['categorytype']= ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5']= ""
        request.session['sSAPCode']  = ""
        AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
        if AdminunitlistActive:
            sPlantCode = AdminunitlistActive.splantno
            sPlantNameName = AdminunitlistActive.splantname + " (" + AdminunitlistActive.scode.strip() + ")"
            sPlantNameNameA = AdminunitlistActive.splantname

        request.session['sPlantCode']   =sPlantCode
        





 
             

 


        if (styperefnameA1 == "Part No"):
            Adminassetcategorytypelist1_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        elif (styperefnameA1 == "Equipment"):
            Adminassetcategorytypelist1_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        elif (styperefnameA1 == "Operation"):
            Adminassetcategorytypelist1_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        elif (styperefnameA1 == "Material"):
            Adminassetcategorytypelist1_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA1 })
        else:
            Adminassetcategorytypelist1_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 1).order_by('scategorytype').values()  
                
        if (styperefnameA2 == "Part No"):
            Adminassetcategorytypelist2_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2 })
        elif (styperefnameA2 == "Equipment"):
            Adminassetcategorytypelist2_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2  })
        elif (styperefnameA2 == "Operation"):
            Adminassetcategorytypelist2_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2  })
        elif (styperefnameA2 == "Material"):
            Adminassetcategorytypelist2_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            #return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':styperefnameA2 })
        else:
            Adminassetcategorytypelist2_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 2).order_by('scategorytype').values()  



        if (styperefnameA3 == "Part No"):
            Adminassetcategorytypelist3_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        elif (styperefnameA3 == "Equipment"):
            Adminassetcategorytypelist3_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        elif (styperefnameA3 == "Operation"):
            Adminassetcategorytypelist3_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        elif (styperefnameA3 == "Material"):
            Adminassetcategorytypelist3_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':styperefnameA3  })
        else:
            Adminassetcategorytypelist3_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 3).order_by('scategorytype').values()  
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlow3.html', {'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ, 'styperefnameA1':request.session['styperefnameA3'] })

        if (styperefnameA4 == "Part No"):
            Adminassetcategorytypelist4_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4  })
        elif (styperefnameA4 == "Equipment"):
            Adminassetcategorytypelist4_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4  })
        elif (styperefnameA4 == "Operation"):
            Adminassetcategorytypelist4_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4  })
        elif (styperefnameA4 == "Material"):
            Adminassetcategorytypelist4_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':styperefnameA4 })
        else:
            Adminassetcategorytypelist4_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 4).order_by('scategorytype').values()  
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlow4.html', {'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ, 'styperefnameA1':request.session['styperefnameA4'] })

        if (styperefnameA5 == "Part No"):
            Adminassetcategorytypelist5_AddNew1OBJ =   Adminpartdetailslist.objects.order_by('spartno') 
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowPartNo.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5  })
        elif (styperefnameA5 == "Equipment"):
            Adminassetcategorytypelist5_AddNew1OBJ =    Adminequipmentlist.objects.order_by('sequipmentname')   
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowEquipment.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5 })
        elif (styperefnameA5 == "Operation"):
            Adminassetcategorytypelist5_AddNew1OBJ =     Admininstrumentoperationlist.objects.filter(lcompanyid=lcompanyid).order_by('soperation').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowOperation.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5 })
        elif (styperefnameA5 == "Material"):
            Adminassetcategorytypelist5_AddNew1OBJ =     Admininstrumentmateriallist.objects.filter(lcompanyid=lcompanyid).order_by('smaterial').values()
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlowMaterial.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ, 'styperefnameA1':styperefnameA5 })
        else:
            Adminassetcategorytypelist5_AddNew1OBJ =  Adminassetcategorytypelist1.objects.filter(lcategorytype1 =ID_Categories, lcode5 = 5).order_by('scategorytype').values()  
            # return render(request, 'CloudCaliber/GaugeMasterDueListCreateID_stypeFlow5.html', {'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ, 'styperefnameA1':request.session['styperefnameA5']  })





        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        tcategoriesLst = Adminassetcategorylist.objects.filter(lassetid= ClassificationData).order_by('categorytype')

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     

        

        # page_number  = request.GET.get('page')

        # lRecCount =0 
        # lRecCount = Masterinstrumentslist_list.count()
        # lRecCount1 =0

        # if (lRecCount > 500): 
        #     lRecCount1 = int((lRecCount * 40/100) )
        # else:
        #     lRecCount1 =lRecCount
            
        # if (lRecCount1 == 0):
        #     lRecCount1 =1
        # paginator = Paginator(Masterinstrumentslist_list, lRecCount1)
        # try:
        #     Masterinstrumentslist_lists = paginator.get_page(page_number )
        # except PageNotAnInteger:
        #     Masterinstrumentslist_lists = paginator.page(1)
        # except EmptyPage:
        #     Masterinstrumentslist_lists = paginator.page(paginator.num_pages)
        

        Adminunitlist_list = Adminunitlist.objects.order_by('splantno')



        return render(request,  'CloudCaliber/GaugeMasterDueList.html', 
        {
            'Masterinstrumentslist_lists':Masterinstrumentslist_list, 
            
            'CurDateNow':datetime.today(), 
            'lPlantId':lPlantId,
            '30DateNow':datetime.now() + timedelta(days=30),  
            'AreaofUselist_list':AreaofUselist_list, 
            'Adminunitlist_list':Adminunitlist_list,
            'Location':Location,
            'txtSearch':txtSearch,
            'sPlantName': sPlantName ,  
            'semployeename':  semployeename,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': ClassificationData , 
            'cmbCategoryID': ID_Categories ,  
            'cmbFlow1ID': 0 ,  
            'cmbFlow2ID': 0 ,  
            'cmbFlow3ID': 0 ,  
            'cmbFlow4ID': 0 ,
            'cmbFlow5ID': 0 ,          
            'CurDateFrom': sCurDateFrom,     
            'CurDateTo': sCurDateTo,
            'cmbFlow1label': styperefnameA1,  
            'cmbFlow2label': styperefnameA2,  
            'cmbFlow3label': styperefnameA3,  
            'cmbFlow4label': styperefnameA4,
            'cmbFlow5label': styperefnameA5,    
            'Adminassettypelist_list':Adminassettypelist_list,
            'tcategoriesLst': tcategoriesLst, 
            'Adminassetcategorytypelist1_AddNew1OBJ': Adminassetcategorytypelist1_AddNew1OBJ,
            'Adminassetcategorytypelist2_AddNew1OBJ': Adminassetcategorytypelist2_AddNew1OBJ,
            'Adminassetcategorytypelist3_AddNew1OBJ': Adminassetcategorytypelist3_AddNew1OBJ,
            'Adminassetcategorytypelist4_AddNew1OBJ': Adminassetcategorytypelist4_AddNew1OBJ,
            'Adminassetcategorytypelist5_AddNew1OBJ': Adminassetcategorytypelist5_AddNew1OBJ,
            'bNewID': 0 ,  
            
            }) 

    else: 
         



         
        AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
        if AdminunitlistActive:
            sPlantCode = AdminunitlistActive.splantno
            sPlantNameName = AdminunitlistActive.splantname + " (" + AdminunitlistActive.scode.strip() + ")"
            sPlantNameNameA = AdminunitlistActive.splantname

        request.session['sPlantCode']   =sPlantCode
        
        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     

        Masterinstrumentslist_list =  Masterinstrumentslist.objects.filter (lplantid=lPlantId,  bshowlistascalibrate=1,  bsapcodegenerate = 1,   dtnextcalib__gte=CurDateFrom,   dtnextcalib__lte=CurDateTo).order_by('sinstrumentid')

           
        lRecCount =0 
        lRecCount = Masterinstrumentslist_list.count()
        lRecCount1 =0

        # page_number  = request.GET.get('page')


        # if (lRecCount > 500): 
        #     lRecCount1 = int((lRecCount * 7/100) )
        # else:
        #     lRecCount1 =lRecCount
            
        # if (lRecCount1 == 0):
        #     lRecCount1 =1
        # paginator = Paginator(Masterinstrumentslist_list, lRecCount1)
        # try:
        #     Masterinstrumentslist_lists = paginator.get_page(page_number )
        # except PageNotAnInteger:
        #     Masterinstrumentslist_lists = paginator.page(1)
        # except EmptyPage:
        #     Masterinstrumentslist_lists = paginator.page(paginator.num_pages)
        

        Adminunitlist_list = Adminunitlist.objects.order_by('splantno')




        return render(request,  'CloudCaliber/GaugeMasterDueList.html', 
        {
            'Masterinstrumentslist_lists':Masterinstrumentslist_list, 
            
            'CurDateNow':datetime.now(),
            'lPlantId':lPlantId,  
            '30DateNow':datetime.now() + timedelta(days=30),  
            'AreaofUselist_list':AreaofUselist_list,
            'Adminunitlist_list':Adminunitlist_list,
            'title':'User list', 
            'message':'Your User list page.',
            'sPlantName': sPlantName , 
            'Location': 0 , 
            'semployeename':  semployeename,
            'txtSearch': "" , 
            'sCodeFinal1': "" ,      
            'CurDateFrom': sCurDateFrom,     
            'CurDateTo': sCurDateTo,
            'sCodeFinal2': "" ,  
            'cmbClassificationID': 0 , 
            'cmbCategoryID': 0 ,  
            'cmbFlow1ID': 0 ,  
            'cmbFlow2ID': 0 ,  
            'cmbFlow3ID': 0 ,  
            'cmbFlow4ID': 0 ,
            'cmbFlow5ID': 0 ,     
            'cmbFlow1label': "",  
            'cmbFlow2label': "",  
            'cmbFlow3label': "",  
            'cmbFlow4label': "",
            'cmbFlow5label': "",  
            'bNewID': 0 ,  
            'Adminassettypelist_list':Adminassettypelist_list,
        }) 






def GaugeCalibration30DaysDue(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistUnderPurchase.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 



        lunitidA=request.session['lunitid']  
                            
        lLoginUserId = request.session['lLoginUserId'] 
        semployeename = request.session['semployeename'] 
        semployeeno = request.session['semployeeno'] 
        lunitid = request.session['lunitid'] 
        sunitno = request.session['sunitno'] 
        lcompanyid = request.session['lcompanyid'] 
        scompantname = request.session['scompantname'] 
        semailaddress = request.session['semailaddress'] 
        smobile = request.session['smobile']

        if request.session:
            request.session.clear()

            
        request.session['bSAPCodeDone']  = 0
        request.session['bSAPCodeNotDone']  = 0
        request.session['ID_Categories']  = 0
        request.session['ClassificationData']  = 0
        request.session['Flow1Data']  = 0
        request.session['Flow2Data']  = 0
        request.session['Flow3Data']  = 0
        request.session['Flow4Data']  = 0
        request.session['Flow5Data']  = 0
        request.session['GaugeClass']  = 0
        request.session['Location']  = 0 
        request.session['txtSearch']  = "" 

        CurDateFrom = datetime.today().strftime('%d-%m-%Y')
        request.session['CurDateFrom']  = CurDateFrom
        request.session['CurDateTo']  = CurDateFrom                  
        request.session['lLoginUserId']  =lLoginUserId
        request.session['semployeename']  = semployeename 
        request.session['semployeeno'] = semployeeno  
        request.session['lunitid'] = lunitid   
        request.session['sunitno']  =sunitno
        request.session['lcompanyid'] = lcompanyid  
        request.session['scompantname'] = scompantname 
        request.session['semailaddress']  = semailaddress
        request.session['smobile'] = smobile



        
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0
        request.session['lCategoryID'] = 0     
 

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistUnderPurchase.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 
 





def GaugeCalibrationUnder(request):
    
    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeCalibration30DaysDue.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeCalibrationUnder.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  







def GaugeCalibration1CalendarYearsDue(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeCalibration30DaysDue.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeCalibration30DaysDue.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 




def GaugeMSADue1Year(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMSADue1Year.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMSADue1Year.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 







def GaugeMSADue(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMSADue.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMSADue.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 







def GaugeCalibrationHistory(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeCalibrationHistory.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeCalibrationHistory.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 







def GaugeMSAHistory(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMSAHistory.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMSAHistory.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 







def Gauge8DHistory(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/Gauge8DHistory.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/Gauge8DHistory.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 





 











def GaugeMasterlistIdle(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistIdle.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistIdle.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 











def GaugeMasterlistSpare(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistSpare.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistSpare.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 














def GaugeMasterlistIssued(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistIssued.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistIssued.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 








def GaugeMasterlistDamaged(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistDamaged.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistDamaged.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 









def GaugeMasterlistMissing(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistMissing.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistMissing.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 







def GaugeMasterlistLimitedUsage(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistLimitedUsage.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistLimitedUsage.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 




def GaugeMasterlistOutofCalibration(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistOutofCalibration.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistOutofCalibration.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 





def GaugeMasterlistScraped(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistScraped.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistScraped.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 





 





def GaugeVerifications(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeVerifications.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeVerifications.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 





def GaugeVerificationDue(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeVerificationDue.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeVerificationDue.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 








 

def GaugeVerificationUnderProcess(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeVerificationUnderProcess.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeVerificationUnderProcess.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 



def GaugeVerificationHistory(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeVerificationHistory.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeVerificationHistory.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 






@csrf_exempt
def GaugeDueListList(request):




    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistDueList.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistDueList.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })






def GaugeMasterlistIssueIdle(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistIssueIdle.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistIssueIdle.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 






def GaugeMasterlistIssueSpare(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeMasterlistIssueSpare.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeMasterlistIssueSpare.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 







def GaugeIssueReturn(request):

    lLoginUserIdA = request.session['lLoginUserId'] 
    if(lLoginUserIdA==0):
        return views.home(request)

    sCodeFinal1 = ""
    sCodeFinal2 = ""
 
    

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  
    request.session['sPlantCode']   = ""
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0
    
    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId) 
    if AdminunitlistActive:
        sPlantCode = AdminunitlistActive.splantno

    request.session['sPlantCode']   =sPlantCode

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    if request.method == "POST":


        data = request.POST
        if 'Classification' in request.POST:
            cmbClassificationID=request.POST['Classification'] 

        if 'Category' in request.POST:
            cmbCategoryID=request.POST['Category'] 

        if 'getFlow1' in request.POST:
            cmbgetFlow1ID=request.POST['getFlow1'] 



        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        return render(request,  'CloudCaliber/GaugeIssueReturn.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        })  
    else: 
         
        request.session['lSerialNo'] = 0
        request.session['sCodeFinal1AK'] = 0

        request.session['lContNo'] = 0
        request.session['ID_Categories'] = 0
        request.session['sCategoryCode'] = ""
        request.session['categorytype'] = ""
        request.session['styperefname1'] = ""
        request.session['styperefname2'] = ""
        request.session['styperefname3'] = ""
        request.session['styperefname4'] = ""
        request.session['styperefname5'] = ""
        request.session['sCodeFinal1A'] = sCodeFinal1
        request.session['sCodeFinal2A'] = sCodeFinal2
    
        request.session['sFlowCode1a'] = ""
        request.session['sFlowCode2a'] = ""
        request.session['sFlowCode3a'] = ""
        request.session['sFlowCode4a'] = ""
        request.session['sFlowCode5a'] = ""
        
        request.session['sFlowCode1']   =""
        request.session['sFlowCode2']   =""
        request.session['sFlowCode3']   =""
        request.session['sFlowCode4']   =""
        request.session['sFlowCode5']   =""

        request.session['cmbClassificationID'] =cmbClassificationID
        request.session['cmbCategoryID'] =cmbCategoryID
        request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
        request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
        request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
        request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
        request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
        request.session['cmbgetFlow6ID'] =cmbgetFlow6ID
        
        request.session['sCategoryCode'] = sCategoryCode
        request.session['lcontinuousnob'] = lcontinuousnob
        request.session['bFlow'] = bFlow
        request.session['sFlowName'] = sFlowName
        request.session['lcontinuousnoa'] = lcontinuousnoa
        request.session['bFlow1'] = bFlow1
        request.session['sFlowName1'] = sFlowName1
        request.session['lcontinuousnoa1'] = lcontinuousnoa1
        request.session['bFlow2'] = bFlow2
        request.session['sFlowName2'] = sFlowName2
        request.session['lcontinuousnoa2'] = lcontinuousnoa2
        request.session['bFlow3'] = bFlow3
        request.session['sFlowName3'] = sFlowName3
        request.session['lcontinuousnoa3'] = lcontinuousnoa3
        request.session['bFlow4'] = bFlow4
        request.session['sFlowName4'] = sFlowName4
        request.session['lcontinuousnoa4'] = lcontinuousnoa4
        request.session['bFlow5'] = bFlow5
        request.session['sFlowName5'] = sFlowName5
        request.session['lcontinuousnoa5'] = lcontinuousnoa5
        request.session['bFlow6'] = bFlow6
        request.session['sFlowName6'] = sFlowName6
        request.session['lcontinuousnoa6'] = lcontinuousnoa6
        request.session['bFlow7'] = bFlow7
        request.session['sFlowName7'] = sFlowName7
        request.session['lcontinuousnoa7'] = lcontinuousnoa7
        request.session['bFlow8'] = bFlow8
        request.session['sFlowName8'] = sFlowName8
        request.session['lcontinuousnoa8'] = lcontinuousnoa8
        request.session['bFlow9'] = bFlow9
        request.session['sFlowName9'] = sFlowName9
        request.session['lcontinuousnoa9'] = lcontinuousnoa9
        request.session['bFlow10'] = bFlow10
        request.session['sFlowName10'] = sFlowName10
        request.session['lcontinuousnoa10'] = lcontinuousnoa10

        Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
        lunitidA=request.session['lunitid']  
        AreaofUselist_list = Adminlocationlist.objects.filter(lplantid=lunitidA).order_by('slocationname').values()     
                   

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:
            Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else: 
            Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
            
        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

        if(sFlowName1 == "Part No1"):
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
        else:  
            Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

        Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

        Admintoleranceclasslist_list =  Admintoleranceclasslist.objects.order_by('stoleranceclass')
        
        return render(request,  'CloudCaliber/GaugeIssueReturn.html', 
        {
            'title':'User list', 
            'message':'Your User list page.',
            'year':datetime.now().year,  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'AreaofUselist_list':AreaofUselist_list,
            'cmbClassificationID': int(cmbClassificationID) ,  
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Admintoleranceclasslist_list': Admintoleranceclasslist_list,
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
        }) 










@csrf_exempt
def GMlistClassificationDueListCreate_ID(request):
    cmbClassificationID = request.GET.get('cmbClassificationID', None)
    data = { 
        'is_taken1': Adminassetcategorylist.objects.filter(lassetid=cmbClassificationID).values()
    } 
        #data['error_message'] = 'A user with this username already exists.'
    return JsonResponse(data)


    
@csrf_exempt
def load_GMlistClassificationDueListCreate_ID(request):

    sCodeFinal1 = ""
    sCodeFinal2 = ""

    sPlantCode = ""
    sPlantCode=request.session['sPlantCode']  

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  

    cmbClassificationID = 0
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
 

    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode




    cmbClassificationID = request.GET.get('cmbClassificationID')
    sPlantCode = ""
    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0

    AdminunitlistActive = Adminunitlist.objects.get(lplantid=lPlantId)
    sPlantCode = AdminunitlistActive.splantno
    sClassificationCode = ""
    sPlantCode=request.session['sPlantCode'] 
    request.session['sClassificationCode']=""
    
    Adminassettypelist_listA =  Adminassetcategorytypelist.objects.get(lcategorytypeid=cmbClassificationID)
    request.session['sClassificationCode']=Adminassettypelist_listA.scode
    sClassificationCode=request.session['sClassificationCode']
    sCodeFinal1=sClassificationCode
    sCodeFinal2=sClassificationCode + "-" + sPlantCode + "001"
 
    Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
    Adminassetcategorylistobj = Adminassetcategorylist.objects.filter(lassetid=cmbClassificationID).values()
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else: 
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

    Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()
    
        #data['error_message'] = 'A user with this username already exists.'
    
    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    request.session['sCategoryCode'] = sCategoryCode
    request.session['lcontinuousnob'] = lcontinuousnob
    request.session['bFlow'] = bFlow
    request.session['sFlowName'] = sFlowName
    request.session['lcontinuousnoa'] = lcontinuousnoa
    request.session['bFlow1'] = bFlow1
    request.session['sFlowName1'] = sFlowName1
    request.session['lcontinuousnoa1'] = lcontinuousnoa1
    request.session['bFlow2'] = bFlow2
    request.session['sFlowName2'] = sFlowName2
    request.session['lcontinuousnoa2'] = lcontinuousnoa2
    request.session['bFlow3'] = bFlow3
    request.session['sFlowName3'] = sFlowName3
    request.session['lcontinuousnoa3'] = lcontinuousnoa3
    request.session['bFlow4'] = bFlow4
    request.session['sFlowName4'] = sFlowName4
    request.session['lcontinuousnoa4'] = lcontinuousnoa4
    request.session['bFlow5'] = bFlow5
    request.session['sFlowName5'] = sFlowName5
    request.session['lcontinuousnoa5'] = lcontinuousnoa5
    request.session['bFlow6'] = bFlow6
    request.session['sFlowName6'] = sFlowName6
    request.session['lcontinuousnoa6'] = lcontinuousnoa6
    request.session['bFlow7'] = bFlow7
    request.session['sFlowName7'] = sFlowName7
    request.session['lcontinuousnoa7'] = lcontinuousnoa7
    request.session['bFlow8'] = bFlow8
    request.session['sFlowName8'] = sFlowName8
    request.session['lcontinuousnoa8'] = lcontinuousnoa8
    request.session['bFlow9'] = bFlow9
    request.session['sFlowName9'] = sFlowName9
    request.session['lcontinuousnoa9'] = lcontinuousnoa9
    request.session['bFlow10'] = bFlow10
    request.session['sFlowName10'] = sFlowName10
    request.session['lcontinuousnoa10'] = lcontinuousnoa10


    return render(request, 'CloudCaliber/GaugeMasterlistDueList.html',
        {  
            'cmbClassificationID':cmbClassificationID,
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,    
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
            'Adminassetcategorylistobj': Adminassetcategorylistobj,
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                         
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
            
        })


        
    
@csrf_exempt
def load_GMlisCategoryDueListCreate_ID(request):

    
    getFlow1Code = ""
    request.session['getFlow1Code']  =getFlow1Code
    getFlow2Code = ""
    request.session['getFlow2Code']  =getFlow2Code
    getFlow3Code = ""
    request.session['getFlow3Code']  =getFlow3Code
    getFlow4Code = ""
    request.session['getFlow4Code']  =getFlow4Code
    getFlow5Code = ""
    request.session['getFlow5Code']  =getFlow5Code
    getFlowContCode = ""
    request.session['getFlowContCode']  =getFlowContCode


    sCodeFinal1 = ""
    sCodeFinal2 = ""

    sPlantCode = ""
    sPlantCode=request.session['sPlantCode']  

    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  

    cmbClassificationID = request.session['cmbClassificationID']
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    cmbCategoryID = request.GET.get('cmbCategoryID')
    sPlantCode = ""

    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0




    AdminunitlistActive =  Adminunitlist.objects.get(lplantid=lPlantId)
    sPlantCode = AdminunitlistActive.splantno
     
 
    Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
    Adminassetcategorylistobj = Adminassetcategorylist.objects.filter(lassetid=cmbClassificationID).values()
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else: 
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

    Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()
    

        #data['error_message'] = 'A user with this username already exists.'
    

    AdminassetcategorylistActive = Adminassetcategorylist.objects.get(lcategoryid=cmbCategoryID)
    sCategoryCode = AdminassetcategorylistActive.scode
    lcontinuousnob  = AdminassetcategorylistActive.lcontinuousnob
    lcontinuousnoa  = AdminassetcategorylistActive.lcontinuousnoa
     

    request.session['btyperefascontinuousnoa'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa == 1):
        request.session['btyperefascontinuousnoa'] = 1        
        request.session['bContFlag'] = 1
        

    request.session['btyperefascontinuousnoa1'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa1 == 1):
        request.session['btyperefascontinuousnoa1'] = 1

    request.session['btyperefascontinuousnoa2'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa2 == 1):
        request.session['btyperefascontinuousnoa2'] = 1

    request.session['btyperefascontinuousnoa3'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa3 == 1):
        request.session['btyperefascontinuousnoa3'] = 1

    request.session['btyperefascontinuousnoa4'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa4 == 1):
        request.session['btyperefascontinuousnoa4'] = 1

    request.session['btyperefascontinuousnoa5'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa5 == 1):
        request.session['btyperefascontinuousnoa5'] = 1

    request.session['btyperefascontinuousnoa6'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa6 == 1):
        request.session['btyperefascontinuousnoa6'] = 1

    request.session['btyperefascontinuousnoa7'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa7 == 1):
        request.session['btyperefascontinuousnoa7'] = 1

    request.session['btyperefascontinuousnoa8'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa8 == 1):
        request.session['btyperefascontinuousnoa8'] = 1

    request.session['btyperefascontinuousnoa9'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa9 == 1):
        request.session['btyperefascontinuousnoa9'] = 1

    request.session['btyperefascontinuousnoa10'] = 0
    if (AdminassetcategorylistActive.btyperefascontinuousnoa10 == 1):
        request.session['btyperefascontinuousnoa10'] = 1



    sFlowName1  = AdminassetcategorylistActive.styperefname1
    if (sFlowName1 != ""):
        bFlow1 = 1

    sFlowName2  = AdminassetcategorylistActive.styperefname2
    if (sFlowName2 != ""):
        bFlow2 = 1

    sFlowName3  = AdminassetcategorylistActive.styperefname3
    if (sFlowName3 != ""):
        bFlow3 = 1

    sFlowName4  = AdminassetcategorylistActive.styperefname4
    if (sFlowName4 != ""):
        bFlow4 = 1

    sFlowName5  = AdminassetcategorylistActive.styperefname5
    if (sFlowName5 != ""):
        bFlow5 = 1

    sFlowName6  = AdminassetcategorylistActive.styperefname6
    if (sFlowName6 != ""):
        bFlow6 = 1

    sFlowName7  = AdminassetcategorylistActive.styperefname7
    if (sFlowName7 != ""):
        bFlow7 = 1

    sFlowName8  = AdminassetcategorylistActive.styperefname8
    if (sFlowName8 != ""):
        bFlow8 = 1
    
    sFlowName9  = AdminassetcategorylistActive.styperefname9
    if (sFlowName9 != ""):
        bFlow9 = 1

    sFlowName10  = AdminassetcategorylistActive.styperefname10 
    if (sFlowName10 != ""):
        bFlow10 = 1
    
    lRunningNo = 0
    lContiNo = 0


    sClassificationCode = ""
    sPlantCode=request.session['sPlantCode']  
    request.session['sCategoryCode']=""
      
    request.session['sCategoryCode']=sCategoryCode
    sClassificationCode=request.session['sClassificationCode']
    sCodeFinal1=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "")


    sRunningNo =""
    sContiNo =""

    AdminassetcontinuousformatlistActive = Adminassetcontinuousformatlist.objects.filter(scontinuousformat=sCodeFinal1).values()
    if AdminassetcontinuousformatlistActive:
        lContiNo = AdminassetcontinuousformatlistActive.lcontinuousformat

    lContiNo  = lContiNo +1

    sContiNo=str(lContiNo)
    if(len(sContiNo)==1):
        sContiNo = "00"+sContiNo
    if(len(sContiNo)==2):
        sContiNo = "0"+sContiNo

    AdminassetserialformatlistActive = Adminassetserialformatlist.objects.filter(scode=sCodeFinal1).values()
    if AdminassetserialformatlistActive:
        lRunningNo = AdminassetserialformatlistActive.lserialno
    
    lRunningNo  = lRunningNo   +1


    sRunningNo = str(lRunningNo) 
    if(len(sRunningNo)==1):
        sRunningNo = "00"+sRunningNo
    if(len(sRunningNo)==2):
        sRunningNo = "0"+sRunningNo



    sCodeFinal2=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "") + "-" + sPlantCode[:2] + sRunningNo




    request.session['cmbClassificationID'] =cmbClassificationID
    request.session['cmbCategoryID'] =cmbCategoryID
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    request.session['cmbgetFlow6ID'] =cmbgetFlow6ID

    request.session['sCategoryCode'] = sCategoryCode
    request.session['lcontinuousnob'] = lcontinuousnob
    request.session['bFlow'] = bFlow
    request.session['sFlowName'] = sFlowName
    request.session['lcontinuousnoa'] = lcontinuousnoa
    request.session['bFlow1'] = bFlow1
    request.session['sFlowName1'] = sFlowName1
    request.session['lcontinuousnoa1'] = lcontinuousnoa1
    request.session['bFlow2'] = bFlow2
    request.session['sFlowName2'] = sFlowName2
    request.session['lcontinuousnoa2'] = lcontinuousnoa2
    request.session['bFlow3'] = bFlow3
    request.session['sFlowName3'] = sFlowName3
    request.session['lcontinuousnoa3'] = lcontinuousnoa3
    request.session['bFlow4'] = bFlow4
    request.session['sFlowName4'] = sFlowName4
    request.session['lcontinuousnoa4'] = lcontinuousnoa4
    request.session['bFlow5'] = bFlow5
    request.session['sFlowName5'] = sFlowName5
    request.session['lcontinuousnoa5'] = lcontinuousnoa5
    request.session['bFlow6'] = bFlow6
    request.session['sFlowName6'] = sFlowName6
    request.session['lcontinuousnoa6'] = lcontinuousnoa6
    request.session['bFlow7'] = bFlow7
    request.session['sFlowName7'] = sFlowName7
    request.session['lcontinuousnoa7'] = lcontinuousnoa7
    request.session['bFlow8'] = bFlow8
    request.session['sFlowName8'] = sFlowName8
    request.session['lcontinuousnoa8'] = lcontinuousnoa8
    request.session['bFlow9'] = bFlow9
    request.session['sFlowName9'] = sFlowName9
    request.session['lcontinuousnoa9'] = lcontinuousnoa9
    request.session['bFlow10'] = bFlow10
    request.session['sFlowName10'] = sFlowName10
    request.session['lcontinuousnoa10'] = lcontinuousnoa10
    
    return render(request, 'CloudCaliber/GaugeMasterlistDueList.html',
        {  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,      
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
            'Adminassetcategorylistobj': Adminassetcategorylistobj, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
            
        })


    
@csrf_exempt
def load_GMlisFlow1DueListCreate_ID(request):

    
    request.session['getFlow1Code']  = ""
    getFlow1Code = ""
    getFlow1Code =request.session['getFlow1Code']  
    getFlow2Code = ""
    getFlow2Code = request.session['getFlow2Code'] 
    getFlow3Code = ""
    getFlow3Code =request.session['getFlow3Code'] 
    getFlow4Code = ""
    getFlow4Code =request.session['getFlow4Code'] 
    getFlow5Code = ""
    getFlow5Code =request.session['getFlow5Code'] 
    getFlowContCode = ""
    getFlowContCode =request.session['getFlowContCode']


    sCodeFinal1 = ""
    sCodeFinal2 = ""

    sPlantCode = ""
    sPlantCode=request.session['sPlantCode']  

    bContFlag = 0 

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  

    cmbClassificationID = request.session['cmbClassificationID']
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    cmbCategoryID = request.GET.get('cmbCategoryID')
    cmbgetFlow1ID = request.GET.get('cmbgetFlow1ID')
    sPlantCode = ""

    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0




    AdminunitlistActive =  Adminunitlist.objects.get(lplantid=lPlantId)
    sPlantCode = AdminunitlistActive.splantno
     
 
        #data['error_message'] = 'A user with this username already exists.'
    




     
    lRunningNo = 0
    lContiNo = 0


    sClassificationCode = ""
    sPlantCode=request.session['sPlantCode']   
      
    sCategoryCode=request.session['sCategoryCode']
    sClassificationCode=request.session['sClassificationCode']
 
    Adminassetcategorytypelist1Active = Adminassetcategorytypelist1.objects.get(lcategorytypeid=cmbgetFlow1ID)
    getFlow1Code = Adminassetcategorytypelist1Active.scode

    request.session['getFlow1Code'] = getFlow1Code


    sCodeFinal1=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "") + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "")   


    sRunningNo =""
    sContiNo =""

    AdminassetcontinuousformatlistActive = Adminassetcontinuousformatlist.objects.filter(scontinuousformat=sCodeFinal1).values()
    if AdminassetcontinuousformatlistActive:
        lContiNo = AdminassetcontinuousformatlistActive.lcontinuousformat

    lContiNo  = lContiNo +1

    sContiNo=str(lContiNo)
    if(len(sContiNo)==1):
        sContiNo = "00"+sContiNo
    if(len(sContiNo)==2):
        sContiNo = "0"+sContiNo

    if (request.session['bContFlag'] != 0):
        request.session['bContFlag'] = 1
        request.session['getFlowContCode'] = sContiNo  
    else:
        sContiNo = ""
        sContiNo = request.session['getFlowContCode']  

  

    AdminassetserialformatlistActive = Adminassetserialformatlist.objects.filter(scode=sCodeFinal1).values()
    if AdminassetserialformatlistActive:
        lRunningNo = AdminassetserialformatlistActive.lserialno
    
    lRunningNo  = lRunningNo   +1


    sRunningNo = str(lRunningNo) 
    if(len(sRunningNo)==1):
        sRunningNo = "00"+sRunningNo
    if(len(sRunningNo)==2):
        sRunningNo = "0"+sRunningNo



    sCodeFinal2=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "")  + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "") + sContiNo.replace(" ", "")  + "-" + sPlantCode[:2] + sRunningNo




    cmbgetFlow1ID = request.GET.get('cmbgetFlow1ID')
  

    cmbClassificationID =request.session['cmbClassificationID'] 
    cmbCategoryID = request.session['cmbCategoryID'] 
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    cmbgetFlow2ID =request.session['cmbgetFlow2ID'] 
    cmbgetFlow3ID = request.session['cmbgetFlow3ID'] 
    cmbgetFlow4ID =request.session['cmbgetFlow4ID']
    cmbgetFlow5ID = request.session['cmbgetFlow5ID']
    cmbgetFlow6ID = request.session['cmbgetFlow6ID']


    sCategoryCode = request.session['sCategoryCode']
    lcontinuousnob = request.session['lcontinuousnob']
    bFlow = request.session['bFlow']
    sFlowName = request.session['sFlowName']
    lcontinuousnoa = request.session['lcontinuousnoa']

    bFlow1 = request.session['bFlow1']
    sFlowName1 = request.session['sFlowName1']
    lcontinuousnoa1 = request.session['lcontinuousnoa1']

    bFlow2 = request.session['bFlow2']
    sFlowName2 = request.session['sFlowName2']
    lcontinuousnoa2 = request.session['lcontinuousnoa2']

    bFlow3 = request.session['bFlow3']
    sFlowName3 = request.session['sFlowName3']
    lcontinuousnoa3 = request.session['lcontinuousnoa3']

    bFlow4 = request.session['bFlow4']
    sFlowName4 = request.session['sFlowName4']
    lcontinuousnoa4 = request.session['lcontinuousnoa4']

    bFlow5 = request.session['bFlow5']
    sFlowName5 = request.session['sFlowName5']
    lcontinuousnoa5 = request.session['lcontinuousnoa5']

    bFlow6 = request.session['bFlow6']
    sFlowName6 = request.session['sFlowName6']
    lcontinuousnoa6 = request.session['lcontinuousnoa6']

    bFlow7 = request.session['bFlow7']
    sFlowName7 = request.session['sFlowName7']
    lcontinuousnoa7 = request.session['lcontinuousnoa7']

    bFlow8 = request.session['bFlow8']
    sFlowName8 = request.session['sFlowName8']
    lcontinuousnoa8 = request.session['lcontinuousnoa8']

    bFlow9 = request.session['bFlow9']
    sFlowName9 = request.session['sFlowName9']
    lcontinuousnoa9 = request.session['lcontinuousnoa9']

    bFlow10 = request.session['bFlow10']
    sFlowName10 = request.session['sFlowName10']
    lcontinuousnoa10 = request.session['lcontinuousnoa10']
 
    cmbCategoryID = request.session['cmbCategoryID'] 

    Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
    Adminassetcategorylistobj = Adminassetcategorylist.objects.filter(lassetid=cmbClassificationID).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else: 
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

    Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()
    

    return render(request, 'CloudCaliber/GaugeMasterlistDueList.html',
        {  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,      
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
            'Adminassetcategorylistobj': Adminassetcategorylistobj, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
            
        })








@csrf_exempt
def load_GMlisFlow2DueListCreate_ID(request):

    request.session['getFlow2Code']  = ""
    getFlow1Code = ""
    getFlow1Code =request.session['getFlow1Code']  
    getFlow2Code = ""
    getFlow2Code = request.session['getFlow2Code'] 
    getFlow3Code = ""
    getFlow3Code =request.session['getFlow3Code'] 
    getFlow4Code = ""
    getFlow4Code =request.session['getFlow4Code'] 
    getFlow5Code = ""
    getFlow5Code =request.session['getFlow5Code'] 
    getFlowContCode = ""
    getFlowContCode =request.session['getFlowContCode'] 


    sCodeFinal1 = ""
    sCodeFinal2 = ""

    sPlantCode = ""
    sPlantCode=request.session['sPlantCode']  

    bContFlag = 0 

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  

    cmbClassificationID = request.session['cmbClassificationID']
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    cmbCategoryID = request.GET.get('cmbCategoryID')
    cmbgetFlow2ID = request.GET.get('cmbgetFlow2ID')
    sPlantCode = ""

    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0




    AdminunitlistActive =  Adminunitlist.objects.get(lplantid=lPlantId)
    sPlantCode = AdminunitlistActive.splantno
     
 
        #data['error_message'] = 'A user with this username already exists.'
    




     
    lRunningNo = 0
    lContiNo = 0


    sClassificationCode = ""
    sPlantCode=request.session['sPlantCode']   
      
    sCategoryCode=request.session['sCategoryCode']
    sClassificationCode=request.session['sClassificationCode']


    Adminassetcategorytypelist1Active = Adminassetcategorytypelist1.objects.get(lcategorytypeid=cmbgetFlow2ID)
    getFlow2Code = Adminassetcategorytypelist1Active.scode

    request.session['getFlow2Code'] = getFlow2Code


    sCodeFinal1=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "") + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "")   


    sRunningNo =""
    sContiNo =""

    AdminassetcontinuousformatlistActive = Adminassetcontinuousformatlist.objects.filter(scontinuousformat=sCodeFinal1).values()
    if AdminassetcontinuousformatlistActive:
        lContiNo = AdminassetcontinuousformatlistActive.lcontinuousformat

    lContiNo  = lContiNo +1

    sContiNo=str(lContiNo)
    if(len(sContiNo)==1):
        sContiNo = "00"+sContiNo
    if(len(sContiNo)==2):
        sContiNo = "0"+sContiNo

    if (request.session['bContFlag'] != 0):
        request.session['bContFlag'] = 1
        request.session['getFlowContCode'] = sContiNo  
    else:
        sContiNo = ""
        sContiNo = request.session['getFlowContCode']  

  
  

    AdminassetserialformatlistActive = Adminassetserialformatlist.objects.filter(scode=sCodeFinal1).values()
    if AdminassetserialformatlistActive:
        lRunningNo = AdminassetserialformatlistActive.lserialno
    
    lRunningNo  = lRunningNo   +1


    sRunningNo = str(lRunningNo) 
    if(len(sRunningNo)==1):
        sRunningNo = "00"+sRunningNo
    if(len(sRunningNo)==2):
        sRunningNo = "0"+sRunningNo



    sCodeFinal2=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "")  + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "") + sContiNo.replace(" ", "")  + "-" + sPlantCode[:2] + sRunningNo




    cmbgetFlow2ID = request.GET.get('cmbgetFlow2ID')
 

    cmbClassificationID =request.session['cmbClassificationID'] 
    cmbCategoryID = request.session['cmbCategoryID'] 
    request.session['cmbgetFlow2ID'] =cmbgetFlow2ID
    cmbgetFlow1ID =request.session['cmbgetFlow1ID'] 
    cmbgetFlow3ID = request.session['cmbgetFlow3ID'] 
    cmbgetFlow4ID =request.session['cmbgetFlow4ID']
    cmbgetFlow5ID = request.session['cmbgetFlow5ID']
    cmbgetFlow6ID = request.session['cmbgetFlow6ID']


    sCategoryCode = request.session['sCategoryCode']
    lcontinuousnob = request.session['lcontinuousnob']
    bFlow = request.session['bFlow']
    sFlowName = request.session['sFlowName']
    lcontinuousnoa = request.session['lcontinuousnoa']

    bFlow1 = request.session['bFlow1']
    sFlowName1 = request.session['sFlowName1']
    lcontinuousnoa1 = request.session['lcontinuousnoa1']

    bFlow2 = request.session['bFlow2']
    sFlowName2 = request.session['sFlowName2']
    lcontinuousnoa2 = request.session['lcontinuousnoa2']

    bFlow3 = request.session['bFlow3']
    sFlowName3 = request.session['sFlowName3']
    lcontinuousnoa3 = request.session['lcontinuousnoa3']

    bFlow4 = request.session['bFlow4']
    sFlowName4 = request.session['sFlowName4']
    lcontinuousnoa4 = request.session['lcontinuousnoa4']

    bFlow5 = request.session['bFlow5']
    sFlowName5 = request.session['sFlowName5']
    lcontinuousnoa5 = request.session['lcontinuousnoa5']

    bFlow6 = request.session['bFlow6']
    sFlowName6 = request.session['sFlowName6']
    lcontinuousnoa6 = request.session['lcontinuousnoa6']

    bFlow7 = request.session['bFlow7']
    sFlowName7 = request.session['sFlowName7']
    lcontinuousnoa7 = request.session['lcontinuousnoa7']

    bFlow8 = request.session['bFlow8']
    sFlowName8 = request.session['sFlowName8']
    lcontinuousnoa8 = request.session['lcontinuousnoa8']

    bFlow9 = request.session['bFlow9']
    sFlowName9 = request.session['sFlowName9']
    lcontinuousnoa9 = request.session['lcontinuousnoa9']

    bFlow10 = request.session['bFlow10']
    sFlowName10 = request.session['sFlowName10']
    lcontinuousnoa10 = request.session['lcontinuousnoa10']
 
    cmbCategoryID = request.session['cmbCategoryID'] 

    Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
    Adminassetcategorylistobj = Adminassetcategorylist.objects.filter(lassetid=cmbClassificationID).values()
    
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else: 
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

    Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()
    

    return render(request, 'CloudCaliber/GaugeMasterlistDueList.html',
        {  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,      
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
            'Adminassetcategorylistobj': Adminassetcategorylistobj, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
            
        })







@csrf_exempt
def load_GMlisFlow3DueListCreate_ID(request):

    
    request.session['getFlow3Code']  = ""
    getFlow1Code = ""
    getFlow1Code =request.session['getFlow1Code']  
    getFlow2Code = ""
    getFlow2Code = request.session['getFlow2Code'] 
    getFlow3Code = ""
    getFlow3Code =request.session['getFlow3Code'] 
    getFlow4Code = ""
    getFlow4Code =request.session['getFlow4Code'] 
    getFlow5Code = ""
    getFlow5Code =request.session['getFlow5Code'] 
    getFlowContCode = ""
    getFlowContCode =request.session['getFlowContCode']


    sCodeFinal1 = ""
    sCodeFinal2 = ""

    sPlantCode = ""
    sPlantCode=request.session['sPlantCode']  

    bContFlag = 0 

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  

    cmbClassificationID = request.session['cmbClassificationID']
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    cmbCategoryID = request.GET.get('cmbCategoryID')
    cmbgetFlow3ID = request.GET.get('cmbgetFlow3ID')
    sPlantCode = ""

    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0




    AdminunitlistActive =  Adminunitlist.objects.get(lplantid=lPlantId)
    sPlantCode = AdminunitlistActive.splantno
     
 
        #data['error_message'] = 'A user with this username already exists.'
    




     
    lRunningNo = 0
    lContiNo = 0


    sClassificationCode = ""
    sPlantCode=request.session['sPlantCode']   
      
    sCategoryCode=request.session['sCategoryCode']
    sClassificationCode=request.session['sClassificationCode']


    Adminassetcategorytypelist1Active = Adminassetcategorytypelist1.objects.get(lcategorytypeid=cmbgetFlow3ID)
    getFlow3Code = Adminassetcategorytypelist1Active.scode

    request.session['getFlow3Code'] = getFlow3Code


    sCodeFinal1=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "") + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "")   


    sRunningNo =""
    sContiNo =""

    AdminassetcontinuousformatlistActive = Adminassetcontinuousformatlist.objects.filter(scontinuousformat=sCodeFinal1).values()
    if AdminassetcontinuousformatlistActive:
        lContiNo = AdminassetcontinuousformatlistActive.lcontinuousformat

    lContiNo  = lContiNo +1

    sContiNo=str(lContiNo)
    if(len(sContiNo)==1):
        sContiNo = "00"+sContiNo
    if(len(sContiNo)==2):
        sContiNo = "0"+sContiNo

    if (request.session['bContFlag'] != 0):
        request.session['bContFlag'] = 1
        request.session['getFlowContCode'] = sContiNo  
    else:
        sContiNo = ""
        sContiNo = request.session['getFlowContCode']  

  
  

    AdminassetserialformatlistActive = Adminassetserialformatlist.objects.filter(scode=sCodeFinal1).values()
    if AdminassetserialformatlistActive:
        lRunningNo = AdminassetserialformatlistActive.lserialno
    
    lRunningNo  = lRunningNo   +1


    sRunningNo = str(lRunningNo) 
    if(len(sRunningNo)==1):
        sRunningNo = "00"+sRunningNo
    if(len(sRunningNo)==2):
        sRunningNo = "0"+sRunningNo



    sCodeFinal2=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "")  + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "") + sContiNo.replace(" ", "")  + "-" + sPlantCode[:2] + sRunningNo




    cmbgetFlow3ID = request.GET.get('cmbgetFlow3ID')
 

    cmbClassificationID =request.session['cmbClassificationID'] 
    cmbCategoryID = request.session['cmbCategoryID'] 
    request.session['cmbgetFlow3ID'] =cmbgetFlow3ID
    cmbgetFlow2ID =request.session['cmbgetFlow2ID'] 
    cmbgetFlow1ID = request.session['cmbgetFlow1ID'] 
    cmbgetFlow4ID =request.session['cmbgetFlow4ID']
    cmbgetFlow5ID = request.session['cmbgetFlow5ID']
    cmbgetFlow6ID = request.session['cmbgetFlow6ID']


    sCategoryCode = request.session['sCategoryCode']
    lcontinuousnob = request.session['lcontinuousnob']
    bFlow = request.session['bFlow']
    sFlowName = request.session['sFlowName']
    lcontinuousnoa = request.session['lcontinuousnoa']

    bFlow1 = request.session['bFlow1']
    sFlowName1 = request.session['sFlowName1']
    lcontinuousnoa1 = request.session['lcontinuousnoa1']

    bFlow2 = request.session['bFlow2']
    sFlowName2 = request.session['sFlowName2']
    lcontinuousnoa2 = request.session['lcontinuousnoa2']

    bFlow3 = request.session['bFlow3']
    sFlowName3 = request.session['sFlowName3']
    lcontinuousnoa3 = request.session['lcontinuousnoa3']

    bFlow4 = request.session['bFlow4']
    sFlowName4 = request.session['sFlowName4']
    lcontinuousnoa4 = request.session['lcontinuousnoa4']

    bFlow5 = request.session['bFlow5']
    sFlowName5 = request.session['sFlowName5']
    lcontinuousnoa5 = request.session['lcontinuousnoa5']

    bFlow6 = request.session['bFlow6']
    sFlowName6 = request.session['sFlowName6']
    lcontinuousnoa6 = request.session['lcontinuousnoa6']

    bFlow7 = request.session['bFlow7']
    sFlowName7 = request.session['sFlowName7']
    lcontinuousnoa7 = request.session['lcontinuousnoa7']

    bFlow8 = request.session['bFlow8']
    sFlowName8 = request.session['sFlowName8']
    lcontinuousnoa8 = request.session['lcontinuousnoa8']

    bFlow9 = request.session['bFlow9']
    sFlowName9 = request.session['sFlowName9']
    lcontinuousnoa9 = request.session['lcontinuousnoa9']

    bFlow10 = request.session['bFlow10']
    sFlowName10 = request.session['sFlowName10']
    lcontinuousnoa10 = request.session['lcontinuousnoa10']
 
    cmbCategoryID = request.session['cmbCategoryID'] 

    Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
    Adminassetcategorylistobj = Adminassetcategorylist.objects.filter(lassetid=cmbClassificationID).values()
    
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else: 
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

    Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()
    

    return render(request, 'CloudCaliber/GaugeMasterlistDueList.html',
        {  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,      
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
            'Adminassetcategorylistobj': Adminassetcategorylistobj, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
            
        })





@csrf_exempt
def load_GMlisFlow4DueListCreate_ID(request):

    
    request.session['getFlow4Code']  = ""
    getFlow1Code = ""
    getFlow1Code =request.session['getFlow1Code']  
    getFlow2Code = ""
    getFlow2Code = request.session['getFlow2Code'] 
    getFlow3Code = ""
    getFlow3Code =request.session['getFlow3Code'] 
    getFlow4Code = ""
    getFlow4Code =request.session['getFlow4Code'] 
    getFlow5Code = ""
    getFlow5Code =request.session['getFlow5Code'] 
    getFlowContCode = ""
    getFlowContCode =request.session['getFlowContCode']


    sCodeFinal1 = ""
    sCodeFinal2 = ""

    sPlantCode = ""
    sPlantCode=request.session['sPlantCode']  

    bContFlag = 0 

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  

    cmbClassificationID = request.session['cmbClassificationID']
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    cmbCategoryID = request.GET.get('cmbCategoryID')
    cmbgetFlow4ID = request.GET.get('cmbgetFlow4ID')
    sPlantCode = ""

    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0




    AdminunitlistActive =  Adminunitlist.objects.get(lplantid=lPlantId)
    sPlantCode = AdminunitlistActive.splantno
     
 
        #data['error_message'] = 'A user with this username already exists.'
    




     
    lRunningNo = 0
    lContiNo = 0


    sClassificationCode = ""
    sPlantCode=request.session['sPlantCode']   
      
    sCategoryCode=request.session['sCategoryCode']
    sClassificationCode=request.session['sClassificationCode']


    Adminassetcategorytypelist1Active = Adminassetcategorytypelist1.objects.get(lcategorytypeid=cmbgetFlow4ID)
    getFlow4Code = Adminassetcategorytypelist1Active.scode

    request.session['getFlow4Code'] = getFlow4Code


    sCodeFinal1=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "") + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "")   


    sRunningNo =""
    sContiNo =""

    AdminassetcontinuousformatlistActive = Adminassetcontinuousformatlist.objects.filter(scontinuousformat=sCodeFinal1).values()
    if AdminassetcontinuousformatlistActive:
        lContiNo = AdminassetcontinuousformatlistActive.lcontinuousformat

    lContiNo  = lContiNo +1

    sContiNo=str(lContiNo)
    if(len(sContiNo)==1):
        sContiNo = "00"+sContiNo
    if(len(sContiNo)==2):
        sContiNo = "0"+sContiNo

    if (request.session['bContFlag'] != 0):
        request.session['bContFlag'] = 1
        request.session['getFlowContCode'] = sContiNo  
    else:
        sContiNo = ""
        sContiNo = request.session['getFlowContCode']  

  
  

    AdminassetserialformatlistActive = Adminassetserialformatlist.objects.filter(scode=sCodeFinal1).values()
    if AdminassetserialformatlistActive:
        lRunningNo = AdminassetserialformatlistActive.lserialno
    
    lRunningNo  = lRunningNo   +1


    sRunningNo = str(lRunningNo) 
    if(len(sRunningNo)==1):
        sRunningNo = "00"+sRunningNo
    if(len(sRunningNo)==2):
        sRunningNo = "0"+sRunningNo



    sCodeFinal2=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "")  + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "")  + sContiNo.replace(" ", "")  + "-" + sPlantCode[:2] + sRunningNo




    cmbgetFlow4ID = request.GET.get('cmbgetFlow4ID')

    request.session['getFlow1Code'] = getFlow1Code

    cmbClassificationID =request.session['cmbClassificationID'] 
    cmbCategoryID = request.session['cmbCategoryID'] 
    request.session['cmbgetFlow4ID'] =cmbgetFlow4ID
    cmbgetFlow2ID =request.session['cmbgetFlow2ID'] 
    cmbgetFlow3ID = request.session['cmbgetFlow3ID'] 
    cmbgetFlow1ID =request.session['cmbgetFlow1ID']
    cmbgetFlow5ID = request.session['cmbgetFlow5ID']
    cmbgetFlow6ID = request.session['cmbgetFlow6ID']


    sCategoryCode = request.session['sCategoryCode']
    lcontinuousnob = request.session['lcontinuousnob']
    bFlow = request.session['bFlow']
    sFlowName = request.session['sFlowName']
    lcontinuousnoa = request.session['lcontinuousnoa']

    bFlow1 = request.session['bFlow1']
    sFlowName1 = request.session['sFlowName1']
    lcontinuousnoa1 = request.session['lcontinuousnoa1']

    bFlow2 = request.session['bFlow2']
    sFlowName2 = request.session['sFlowName2']
    lcontinuousnoa2 = request.session['lcontinuousnoa2']

    bFlow3 = request.session['bFlow3']
    sFlowName3 = request.session['sFlowName3']
    lcontinuousnoa3 = request.session['lcontinuousnoa3']

    bFlow4 = request.session['bFlow4']
    sFlowName4 = request.session['sFlowName4']
    lcontinuousnoa4 = request.session['lcontinuousnoa4']

    bFlow5 = request.session['bFlow5']
    sFlowName5 = request.session['sFlowName5']
    lcontinuousnoa5 = request.session['lcontinuousnoa5']

    bFlow6 = request.session['bFlow6']
    sFlowName6 = request.session['sFlowName6']
    lcontinuousnoa6 = request.session['lcontinuousnoa6']

    bFlow7 = request.session['bFlow7']
    sFlowName7 = request.session['sFlowName7']
    lcontinuousnoa7 = request.session['lcontinuousnoa7']

    bFlow8 = request.session['bFlow8']
    sFlowName8 = request.session['sFlowName8']
    lcontinuousnoa8 = request.session['lcontinuousnoa8']

    bFlow9 = request.session['bFlow9']
    sFlowName9 = request.session['sFlowName9']
    lcontinuousnoa9 = request.session['lcontinuousnoa9']

    bFlow10 = request.session['bFlow10']
    sFlowName10 = request.session['sFlowName10']
    lcontinuousnoa10 = request.session['lcontinuousnoa10']
 
    cmbCategoryID = request.session['cmbCategoryID'] 

    Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
    Adminassetcategorylistobj = Adminassetcategorylist.objects.filter(lassetid=cmbClassificationID).values()
    
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else: 
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

    Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()
    
    return render(request, 'CloudCaliber/GaugeMasterlistDueList.html',
        {  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,      
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
            'Adminassetcategorylistobj': Adminassetcategorylistobj, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
            
        })







@csrf_exempt
def load_GMlisFlow5DueListCreate_ID(request):

    
    request.session['getFlow5Code']  = ""
    getFlow1Code = ""
    getFlow1Code =request.session['getFlow1Code']  
    getFlow2Code = ""
    getFlow2Code = request.session['getFlow2Code'] 
    getFlow3Code = ""
    getFlow3Code =request.session['getFlow3Code'] 
    getFlow4Code = ""
    getFlow4Code =request.session['getFlow4Code'] 
    getFlow5Code = ""
    getFlow5Code =request.session['getFlow5Code'] 
    getFlowContCode = ""
    getFlowContCode =request.session['getFlowContCode']


    sCodeFinal1 = ""
    sCodeFinal2 = ""

    sPlantCode = ""
    sPlantCode=request.session['sPlantCode']  

    bContFlag = 0 

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  

    cmbClassificationID = request.session['cmbClassificationID']
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    cmbCategoryID = request.GET.get('cmbCategoryID')
    cmbgetFlow5ID = request.GET.get('cmbgetFlow5ID')
    sPlantCode = ""

    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0




    AdminunitlistActive =  Adminunitlist.objects.get(lplantid=lPlantId)
    sPlantCode = AdminunitlistActive.splantno
     
 
        #data['error_message'] = 'A user with this username already exists.'
    




     
    lRunningNo = 0
    lContiNo = 0


    sClassificationCode = ""
    sPlantCode=request.session['sPlantCode']   
      
    sCategoryCode=request.session['sCategoryCode']
    sClassificationCode=request.session['sClassificationCode']


    Adminassetcategorytypelist1Active = Adminassetcategorytypelist1.objects.get(lcategorytypeid=cmbgetFlow5ID)
    getFlow5Code = Adminassetcategorytypelist1Active.scode

    request.session['getFlow5Code'] = getFlow5Code


    sCodeFinal1=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "") + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "")   


    sRunningNo =""
    sContiNo =""

    AdminassetcontinuousformatlistActive = Adminassetcontinuousformatlist.objects.filter(scontinuousformat=sCodeFinal1).values()
    if AdminassetcontinuousformatlistActive:
        lContiNo = AdminassetcontinuousformatlistActive.lcontinuousformat

    lContiNo  = lContiNo +1

    sContiNo=str(lContiNo)
    if(len(sContiNo)==1):
        sContiNo = "00"+sContiNo
    if(len(sContiNo)==2):
        sContiNo = "0"+sContiNo

    if (request.session['bContFlag'] != 0):
        request.session['bContFlag'] = 1
        request.session['getFlowContCode'] = sContiNo  
    else:
        sContiNo = ""
        sContiNo = request.session['getFlowContCode']  

  

    AdminassetserialformatlistActive = Adminassetserialformatlist.objects.filter(scode=sCodeFinal1).values()
    if AdminassetserialformatlistActive:
        lRunningNo = AdminassetserialformatlistActive.lserialno
    
    lRunningNo  = lRunningNo   +1


    sRunningNo = str(lRunningNo) 
    if(len(sRunningNo)==1):
        sRunningNo = "00"+sRunningNo
    if(len(sRunningNo)==2):
        sRunningNo = "0"+sRunningNo



    sCodeFinal2=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "")  + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "") + sContiNo.replace(" ", "")   + "-" + sPlantCode[:2] + sRunningNo




    cmbgetFlow5ID = request.GET.get('cmbgetFlow5ID')

    request.session['getFlow1Code'] = getFlow1Code

    cmbClassificationID =request.session['cmbClassificationID'] 
    cmbCategoryID = request.session['cmbCategoryID'] 
    request.session['cmbgetFlow5ID'] =cmbgetFlow5ID
    cmbgetFlow2ID =request.session['cmbgetFlow2ID'] 
    cmbgetFlow3ID = request.session['cmbgetFlow3ID'] 
    cmbgetFlow4ID =request.session['cmbgetFlow4ID']
    cmbgetFlow1ID = request.session['cmbgetFlow1ID']
    cmbgetFlow6ID = request.session['cmbgetFlow6ID']


    sCategoryCode = request.session['sCategoryCode']
    lcontinuousnob = request.session['lcontinuousnob']
    bFlow = request.session['bFlow']
    sFlowName = request.session['sFlowName']
    lcontinuousnoa = request.session['lcontinuousnoa']

    bFlow1 = request.session['bFlow1']
    sFlowName1 = request.session['sFlowName1']
    lcontinuousnoa1 = request.session['lcontinuousnoa1']

    bFlow2 = request.session['bFlow2']
    sFlowName2 = request.session['sFlowName2']
    lcontinuousnoa2 = request.session['lcontinuousnoa2']

    bFlow3 = request.session['bFlow3']
    sFlowName3 = request.session['sFlowName3']
    lcontinuousnoa3 = request.session['lcontinuousnoa3']

    bFlow4 = request.session['bFlow4']
    sFlowName4 = request.session['sFlowName4']
    lcontinuousnoa4 = request.session['lcontinuousnoa4']

    bFlow5 = request.session['bFlow5']
    sFlowName5 = request.session['sFlowName5']
    lcontinuousnoa5 = request.session['lcontinuousnoa5']

    bFlow6 = request.session['bFlow6']
    sFlowName6 = request.session['sFlowName6']
    lcontinuousnoa6 = request.session['lcontinuousnoa6']

    bFlow7 = request.session['bFlow7']
    sFlowName7 = request.session['sFlowName7']
    lcontinuousnoa7 = request.session['lcontinuousnoa7']

    bFlow8 = request.session['bFlow8']
    sFlowName8 = request.session['sFlowName8']
    lcontinuousnoa8 = request.session['lcontinuousnoa8']

    bFlow9 = request.session['bFlow9']
    sFlowName9 = request.session['sFlowName9']
    lcontinuousnoa9 = request.session['lcontinuousnoa9']

    bFlow10 = request.session['bFlow10']
    sFlowName10 = request.session['sFlowName10']
    lcontinuousnoa10 = request.session['lcontinuousnoa10']
 
    cmbCategoryID = request.session['cmbCategoryID'] 

    Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
    Adminassetcategorylistobj = Adminassetcategorylist.objects.filter(lassetid=cmbClassificationID).values()
    
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else: 
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

    Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()
    

    return render(request, 'CloudCaliber/GaugeMasterlistDueList.html',
        {  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,      
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
            'Adminassetcategorylistobj': Adminassetcategorylistobj, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
            
        })







@csrf_exempt
def load_GMlisFlow6DueListCreate_ID(request):

    
    request.session['getFlow6Code']  = ""
    getFlow1Code = ""
    getFlow1Code =request.session['getFlow1Code']  
    getFlow2Code = ""
    getFlow2Code = request.session['getFlow2Code'] 
    getFlow3Code = ""
    getFlow3Code =request.session['getFlow3Code'] 
    getFlow4Code = ""
    getFlow4Code =request.session['getFlow4Code'] 
    getFlow5Code = ""
    getFlow5Code =request.session['getFlow5Code'] 
    getFlowContCode = ""
    getFlowContCode =request.session['getFlowContCode']


    sCodeFinal1 = ""
    sCodeFinal2 = ""

    sPlantCode = ""
    sPlantCode=request.session['sPlantCode']  

    bContFlag = 0
    request.session['bContFlag'] =bContFlag

    sCodeFinal1=""
    sCodeFinal2="-" + sPlantCode

    lPlantId = request.session['lunitid']  
    sPlantName = request.session['sunitno'] 
    lcompanyid = request.session['lcompanyid']  
    scompantname =  request.session['scompantname']  

    cmbClassificationID = request.session['cmbClassificationID']
    cmbCategoryID = 0
    cmbgetFlow1ID = 0
    cmbgetFlow2ID = 0
    cmbgetFlow3ID = 0
    cmbgetFlow4ID = 0
    cmbgetFlow5ID = 0
    cmbgetFlow6ID = 0
    cmbCategoryID = request.GET.get('cmbCategoryID')
    cmbgetFlow1ID = request.GET.get('cmbgetFlow1ID')
    sPlantCode = ""

    sCategoryCode = ""
    lcontinuousnob  = ""
    bFlow = 0
    sFlowName  = ""
    lcontinuousnoa  =0
    bFlow1 = 0
    sFlowName1  = ""
    lcontinuousnoa1  = 0
    bFlow2 = 0
    sFlowName2  = ""
    lcontinuousnoa2  =0
    bFlow3 = 0
    sFlowName3  = ""
    lcontinuousnoa3  =0
    bFlow4 = 0
    sFlowName4  = ""
    lcontinuousnoa4  =0
    bFlow5 = 0
    sFlowName5  = ""
    lcontinuousnoa5  =0
    bFlow6 = 0
    sFlowName6  = ""
    lcontinuousnoa6  =0
    bFlow7 = 0
    sFlowName7  = ""
    lcontinuousnoa7  =0
    bFlow8 = 0
    sFlowName8  = ""
    lcontinuousnoa8  =0
    bFlow9 = 0
    sFlowName9  = ""
    lcontinuousnoa9  =0
    bFlow10 = 0
    sFlowName10  = ""
    lcontinuousnoa10  =0




    AdminunitlistActive =  Adminunitlist.objects.get(lplantid=lPlantId)
    sPlantCode = AdminunitlistActive.splantno
     
 
        #data['error_message'] = 'A user with this username already exists.'
    




     
    lRunningNo = 0
    lContiNo = 0


    sClassificationCode = ""
    sPlantCode=request.session['sPlantCode']   
      
    sCategoryCode=request.session['sCategoryCode']
    sClassificationCode=request.session['sClassificationCode']


    Adminassetcategorytypelist1Active = Adminassetcategorytypelist1.objects.get(lcategorytypeid=cmbgetFlow1ID)
    getFlow1Code = Adminassetcategorytypelist1Active.scode

    request.session['getFlow1Code'] = getFlow1Code


    sCodeFinal1=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "") + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "")   


    sRunningNo =""
    sContiNo =""

    AdminassetcontinuousformatlistActive = Adminassetcontinuousformatlist.objects.filter(scontinuousformat=sCodeFinal1).values()
    if AdminassetcontinuousformatlistActive:
        lContiNo = AdminassetcontinuousformatlistActive.lcontinuousformat

    lContiNo  = lContiNo +1

    sContiNo=str(lContiNo)
    if(len(sContiNo)==1):
        sContiNo = "00"+sContiNo
    if(len(sContiNo)==2):
        sContiNo = "0"+sContiNo

    if (lcontinuousnoa1 != 0):
        request.session['bContFlag'] = 1
        request.session['getFlowContCode'] = sContiNo  
    else:
        sContiNo = ""
        sContiNo = request.session['getFlowContCode']  

  

    AdminassetserialformatlistActive = Adminassetserialformatlist.objects.filter(scode=sCodeFinal1).values()
    if AdminassetserialformatlistActive:
        lRunningNo = AdminassetserialformatlistActive.lserialno
    
    lRunningNo  = lRunningNo   +1


    sRunningNo = str(lRunningNo) 
    if(len(sRunningNo)==1):
        sRunningNo = "00"+sRunningNo
    if(len(sRunningNo)==2):
        sRunningNo = "0"+sRunningNo



    sCodeFinal2=sClassificationCode.replace(" ", "") + sCategoryCode.replace(" ", "") + getFlow1Code.replace(" ", "") + getFlow2Code.replace(" ", "")  + getFlow3Code.replace(" ", "") + getFlow4Code.replace(" ", "")  + getFlow5Code.replace(" ", "") + sContiNo.replace(" ", "")  + "-" + sPlantCode[:2] + sRunningNo




    cmbgetFlow1ID = request.GET.get('cmbgetFlow1ID')

    request.session['getFlow1Code'] = getFlow1Code

    cmbClassificationID =request.session['cmbClassificationID'] 
    cmbCategoryID = request.session['cmbCategoryID'] 
    request.session['cmbgetFlow1ID'] =cmbgetFlow1ID
    cmbgetFlow2ID =request.session['cmbgetFlow2ID'] 
    cmbgetFlow3ID = request.session['cmbgetFlow3ID'] 
    cmbgetFlow4ID =request.session['cmbgetFlow4ID']
    cmbgetFlow5ID = request.session['cmbgetFlow5ID']
    cmbgetFlow6ID = request.session['cmbgetFlow6ID']


    sCategoryCode = request.session['sCategoryCode']
    lcontinuousnob = request.session['lcontinuousnob']
    bFlow = request.session['bFlow']
    sFlowName = request.session['sFlowName']
    lcontinuousnoa = request.session['lcontinuousnoa']

    bFlow1 = request.session['bFlow1']
    sFlowName1 = request.session['sFlowName1']
    lcontinuousnoa1 = request.session['lcontinuousnoa1']

    bFlow2 = request.session['bFlow2']
    sFlowName2 = request.session['sFlowName2']
    lcontinuousnoa2 = request.session['lcontinuousnoa2']

    bFlow3 = request.session['bFlow3']
    sFlowName3 = request.session['sFlowName3']
    lcontinuousnoa3 = request.session['lcontinuousnoa3']

    bFlow4 = request.session['bFlow4']
    sFlowName4 = request.session['sFlowName4']
    lcontinuousnoa4 = request.session['lcontinuousnoa4']

    bFlow5 = request.session['bFlow5']
    sFlowName5 = request.session['sFlowName5']
    lcontinuousnoa5 = request.session['lcontinuousnoa5']

    bFlow6 = request.session['bFlow6']
    sFlowName6 = request.session['sFlowName6']
    lcontinuousnoa6 = request.session['lcontinuousnoa6']

    bFlow7 = request.session['bFlow7']
    sFlowName7 = request.session['sFlowName7']
    lcontinuousnoa7 = request.session['lcontinuousnoa7']

    bFlow8 = request.session['bFlow8']
    sFlowName8 = request.session['sFlowName8']
    lcontinuousnoa8 = request.session['lcontinuousnoa8']

    bFlow9 = request.session['bFlow9']
    sFlowName9 = request.session['sFlowName9']
    lcontinuousnoa9 = request.session['lcontinuousnoa9']

    bFlow10 = request.session['bFlow10']
    sFlowName10 = request.session['sFlowName10']
    lcontinuousnoa10 = request.session['lcontinuousnoa10']
 
    cmbCategoryID = request.session['cmbCategoryID'] 

    Adminassettypelist_list =  Adminassetcategorytypelist.objects.order_by('scategorytype')
    Adminassetcategorylistobj = Adminassetcategorylist.objects.filter(lassetid=cmbClassificationID).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:
        Adminassetcategorytypelist1_AddNewOBJ1 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=1 ).values()
        
    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else: 
        Adminassetcategorytypelist1_AddNewOBJ2 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=2 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ3 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=3 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ4 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=4 ).values()

    if(sFlowName1 == "Part No1"):
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminpartdetailslist.objects.filter(lcompanyid=lcompanyid).order_by('spartno').values()
    else:  
        Adminassetcategorytypelist1_AddNewOBJ5 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=5 ).values()

    Adminassetcategorytypelist1_AddNewOBJ6 =  Adminassetcategorytypelist1.objects.filter(lcategorytype1=cmbCategoryID, lcode5=6 ).values()

    return render(request, 'CloudCaliber/GaugeMasterlistDueList.html',
        {  
            'sPlantName': sPlantName ,  
            'sCodeFinal1': sCodeFinal1 ,  
            'sCodeFinal2': sCodeFinal2 ,  
            'cmbClassificationID': int(cmbClassificationID) ,   
            'cmbCategoryID': int(cmbCategoryID) ,   
            'cmbgetFlow1ID': int(cmbgetFlow1ID) ,   
            'cmbgetFlow2ID': int(cmbgetFlow2ID) ,   
            'cmbgetFlow3ID': int(cmbgetFlow3ID) ,   
            'cmbgetFlow4ID': int(cmbgetFlow4ID) ,   
            'cmbgetFlow5ID': int(cmbgetFlow5ID) ,   
            'cmbgetFlow6ID': int(cmbgetFlow6ID) ,      
            'Adminassettypelist_list': Adminassettypelist_list, 
            'Adminassetcategorytypelist1_AddNewOBJ1': Adminassetcategorytypelist1_AddNewOBJ1, 
            'Adminassetcategorytypelist1_AddNewOBJ2': Adminassetcategorytypelist1_AddNewOBJ2, 
            'Adminassetcategorytypelist1_AddNewOBJ3': Adminassetcategorytypelist1_AddNewOBJ3, 
            'Adminassetcategorytypelist1_AddNewOBJ4': Adminassetcategorytypelist1_AddNewOBJ4, 
            'Adminassetcategorytypelist1_AddNewOBJ5': Adminassetcategorytypelist1_AddNewOBJ5, 
            'Adminassetcategorytypelist1_AddNewOBJ6': Adminassetcategorytypelist1_AddNewOBJ6,
            'Adminassetcategorylistobj': Adminassetcategorylistobj, 
                                        'SelectedSeries0':"0",
                                        'SelectedSeries1':"1",
                                        'SelectedSeries2':"2",
                                        'SelectedSeries3':"3",
                                        'SelectedSeries4':"4",
                                        'SelectedSeries5':"5",
                                        'SelectedSeries6':"6",
                                        'SelectedSeries7':"7",
                                        'SelectedSeries8':"8",
                                        'SelectedSeries9':"9",
                                        'SelectedSeries10':"10",
                                        'SelectedSeries11':"11",
                                        'SelectedSeries12':"12",
                                        'SelectedSeries13':"13",
                                        'SelectedSeries14':"14",
                                        'SelectedSeries15':"15",
                                        'SelectedSeries16':"16",                                    
                                            'sCategoryCode': sCategoryCode,
                                            'lcontinuousnob': lcontinuousnob,
                                            'bFlow': bFlow,
                                            'sFlowName' : sFlowName,
                                            'lcontinuousnoa': lcontinuousnoa, 

                                            'bFlow1': bFlow1,
                                            'sFlowName1' : sFlowName1,
                                            'lcontinuousnoa1': lcontinuousnoa1, 
                                            'bFlow2': bFlow2,
                                            'sFlowName2' : sFlowName2,
                                            'lcontinuousnoa2': lcontinuousnoa2, 
                                            'bFlow3': bFlow3,
                                            'sFlowName3' : sFlowName3,
                                            'lcontinuousnoa3': lcontinuousnoa3, 
                                            'bFlow4': bFlow4,
                                            'sFlowName4' : sFlowName4,
                                            'lcontinuousnoa4': lcontinuousnoa4, 
                                            'bFlow5': bFlow5,
                                            'sFlowName5' : sFlowName5,
                                            'lcontinuousnoa5': lcontinuousnoa5, 
                                            'bFlow6': bFlow6,
                                            'sFlowName6' : sFlowName6,
                                            'lcontinuousnoa6': lcontinuousnoa6, 
                                            'bFlow7': bFlow7,
                                            'sFlowName7' : sFlowName7,
                                            'lcontinuousnoa7': lcontinuousnoa7, 
                                            'bFlow8': bFlow8,
                                            'sFlowName8' : sFlowName8,
                                            'lcontinuousnoa8': lcontinuousnoa8, 
                                            'bFlow9': bFlow9,
                                            'sFlowName9' : sFlowName9,
                                            'lcontinuousnoa9': lcontinuousnoa9, 
                                            'bFlow10': bFlow10,
                                            'sFlowName10' : sFlowName10,
                                            'lcontinuousnoa10': lcontinuousnoa10, 
            
        })



